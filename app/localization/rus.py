from datetime import datetime
from math import ceil
from typing import List, Optional

from semver import VersionInfo

from aionode.types import ThorChainInfo, ThorBalances, ThorSwapperClout, thor_to_float
from localization.achievements.ach_rus import AchievementsRussianLocalization
from localization.eng_base import BaseLocalization, CREATOR_TG, URL_LEADERBOARD_MCCN
from proto.types import ThorName
from services.jobs.fetch.circulating import ThorRealms
from services.jobs.fetch.runeyield.borrower import LoanReportCard
from services.lib.config import Config
from services.lib.constants import Chains, LOAN_MARKER
from services.lib.date_utils import format_time_ago, seconds_human, now_ts
from services.lib.explorers import get_explorer_url_to_address, get_thoryield_address, \
    get_ip_info_link
from services.lib.midgard.name_service import add_thor_suffix, NameMap
from services.lib.money import pretty_dollar, pretty_money, short_address, adaptive_round_to_str, calc_percent_change, \
    emoji_for_percent_change, short_money, short_dollar, format_percent, RAIDO_GLYPH, short_rune, pretty_percent, \
    chart_emoji, pretty_rune
from services.lib.texts import bold, link, code, ital, pre, x_ses, progressbar, bracketify, \
    up_down_arrow, plural, shorten_text, cut_long_text, underline
from services.lib.utils import grouper, translate
from services.lib.w3.dex_analytics import DexReportEntry, DexReport
from services.models.asset import Asset
from services.models.cap_info import ThorCapInfo
from services.models.key_stats_model import AlertKeyStats
from services.models.last_block import BlockProduceState, EventBlockSpeed
from services.models.loans import AlertLoanOpen, AlertLoanRepayment, AlertLendingStats, AlertLendingOpenUpdate
from services.models.lp_info import LiquidityPoolReport
from services.models.memo import ActionType
from services.models.mimir import MimirChange, MimirHolder
from services.models.net_stats import AlertNetworkStats
from services.models.node_info import NodeSetChanges, NodeInfo, NodeVersionConsensus, NodeEvent, EventDataSlash, \
    NodeEventType, EventBlockHeight, EventProviderStatus, EventProviderBondChange
from services.models.pool_info import PoolInfo, PoolChanges, PoolMapPair
from services.models.price import AlertPrice, RuneMarketInfo
from services.models.queue import QueueInfo
from services.models.runepool import AlertPOLState, AlertRunePoolAction, AlertRunepoolStats
from services.models.s_swap import AlertSwapStart
from services.models.savers import AlertSaverStats
from services.models.trade_acc import AlertTradeAccountAction, AlertTradeAccountStats
from services.models.transfer import RuneTransfer, RuneCEXFlow
from services.models.tx import EventLargeTransaction


class RussianLocalization(BaseLocalization):
    def __init__(self, cfg: Config):
        super().__init__(cfg)
        self.ach = AchievementsRussianLocalization()

    LOADING = '‚åõ <i>–ó–∞–≥—Ä—É–∑–∫–∞...</i>'
    SUCCESS = '‚úÖ –£—Å–ø–µ—Ö!'
    ND = '–ù–µ–æ–ø—Ä.'
    NA = '–ù/–î'

    LIST_NEXT_PAGE = '–°–ª–µ–¥. —Å—Ç—Ä. ¬ª'
    LIST_PREV_PAGE = '¬´ –ü—Ä–µ–¥. —Å—Ç—Ä.'

    BOT_LOADING = '‚åõ –ë–æ—Ç –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≤—Å–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.'

    RATE_LIMIT_WARNING = 'üî• <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n' \
                         '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. ' \
                         '–ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ. ' \
                         '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.'

    SHORT_MONEY_LOC = {
        'K': ' —Ç—ã—Å',
        'M': ' –º–ª–Ω',
        'B': ' –º–ª—Ä–¥',
        'T': ' —Ç—Ä–ª–Ω',
    }

    # ---- WELCOME ----
    def help_message(self):
        return (
            f"–≠—Ç–æ—Ç –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∫—Ä—É–ø–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Å —Å–µ—Ç–∏ {link(self.THORCHAIN_LINK, 'THORChain')}.\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/help ‚Äì —ç—Ç–∞ –ø–æ–º–æ—â—å\n"
            f"/start ‚Äì –∑–∞–ø—É—Å–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            f"/lang ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n"
            f"/cap ‚Äì —Ç–µ–∫—É—â–∏–π –∫–∞–ø –¥–ª—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª–∞—Ö THORChain\n"
            f"/price ‚Äì —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {self.R}\n"
            f"/queue ‚Äì —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            f"/nodes ‚Äì —Å–ø–∏—Å–æ–∫ –Ω–æ–¥\n"
            f"/stats ‚Äì THORChain —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏\n"
            f"/chains ‚Äì –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–ª–æ–∫—á–µ–π–Ω—ã\n"
            f"/lp ‚Äì –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞—à–∏—Ö –ø—É–ª–æ–≤\n"
            f"<b>‚ö†Ô∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ {self.alert_channel_name}!</b>\n"
            f"ü§ó –û—Ç–∑—ã–≤—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {CREATOR_TG}."
        )

    def welcome_message(self, info: ThorCapInfo):
        return (
            f"–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ THORChain –∏ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª—ã.\n"
            f"–¶–µ–Ω–∞ {self.R} —Å–µ–π—á–∞—Å <code>{info.price:.3f} $</code>.\n"
            f"<b>‚ö†Ô∏è –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ {self.alert_channel_name}!</b>\n"
            f"–ù–∞–±–µ—Ä–∏ /help, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
            f"ü§ó –û—Ç–∑—ã–≤—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {CREATOR_TG}."
        )

    def unknown_command(self):
        return (
            "üôÑ –ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ù–∞–∂–º–∏ –Ω–∞ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )

    # ----- MAIN MENU ------

    BUTTON_MM_MY_ADDRESS = 'üè¶ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏'
    BUTTON_MM_METRICS = 'üìê –ú–µ—Ç—Ä–∏–∫–∏'
    BUTTON_MM_SETTINGS = f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
    BUTTON_MM_MAKE_AVATAR = f'ü¶π‚ÄçÔ∏èÔ∏è –°–¥–µ–ª–∞–π –∞–≤—É'
    BUTTON_MM_NODE_OP = 'ü§ñ –û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –Ω–æ–¥'

    # ------ MY WALLETS MENU -----

    BUTTON_SM_ADD_ADDRESS = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å'
    BUTTON_BACK = 'üîô –ù–∞–∑–∞–¥'
    BUTTON_SM_BACK_TO_LIST = 'üîô –ù–∞–∑–∞–¥ –∫ –∞–¥—Ä–µ—Å–∞–º'
    BUTTON_SM_BACK_MM = 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'

    BUTTON_SM_SUMMARY = 'üí≤ –°–≤–æ–¥–∫–∞'

    BUTTON_VIEW_RUNE_DOT_YIELD = 'üåé –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ THORYield'
    BUTTON_VIEW_VALUE_ON = '–°–∫—Ä—ã—Ç—å –¥–µ–Ω—å–≥–∏: –ù–ï–¢'
    BUTTON_VIEW_VALUE_OFF = '–°–∫—Ä—ã—Ç—å –¥–µ–Ω—å–≥–∏: –î–ê'

    BUTTON_TRACK_BALANCE_ON = '–°–ª–µ–¥–∏—Ç—å –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º: –î–ê'
    BUTTON_TRACK_BALANCE_OFF = '–°–ª–µ–¥–∏—Ç—å –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º: –ù–ï–¢'

    BUTTON_TRACK_BOND_ON = '–°–ª–µ–¥–∏—Ç—å –∑–∞ –±–æ–Ω–¥–æ–º: –î–ê'
    BUTTON_TRACK_BOND_OFF = '–°–ª–µ–¥–∏—Ç—å –∑–∞ –±–æ–Ω–¥–æ–º: –ù–ï–¢'

    BUTTON_SET_RUNE_ALERT_LIMIT = '–£—Å—Ç. –º–∏–Ω. –ª–∏–º–∏—Ç R'

    BUTTON_REMOVE_THIS_ADDRESS = '‚ùå –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å'

    BUTTON_LP_SUBSCRIBE = 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'
    TEXT_SUBSCRIBE_TO_LP = 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏? ' \
                           '–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü.'
    BUTTON_LP_UNSUBSCRIBE = 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è'
    BUTTON_LP_UNSUBSCRIBE_ALL = 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö'
    BUTTON_LP_PERIOD_1D = '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å'
    BUTTON_LP_PERIOD_1W = '–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é'
    BUTTON_LP_PERIOD_1M = '–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü'
    ALERT_SUBSCRIBED_TO_LP = 'üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å'
    ALERT_UNSUBSCRIBED_FROM_LP = 'üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å'
    ALERT_UNSUBSCRIBE_FAILED = '–û—Ç–ø–∏—Å–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!'

    @staticmethod
    def text_error_delivering_report(self, e, address, pool):
        return (
            f'üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}. '
            f'–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. '
            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. {CREATOR_TG}\n\n'
            f'–ê–¥—Ä–µ—Å {ital(address)}, –ø—É–ª {ital(pool)}'
        )

    @staticmethod
    def text_subscribed_to_lp(period):
        next_ts = now_ts() + period
        next_date = datetime.utcfromtimestamp(next_ts).strftime('%d.%m.%Y %H:%M:%S')
        next_date += ' UTC'
        return f'üîî <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.\n' \
               f'–ë–ª–∏–∂–∞–π—à–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤–∞–º {ital(next_date)}.'

    TEXT_WALLETS_INTRO = (
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Ö–æ—Ç–∏—Ç–µ —Å–ª–µ–¥–∏—Ç—å. –î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n'
        'üëâ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n'
        'üëâ –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞\n'
        'üëâ –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –±–∞–ª–∞–Ω—Å–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏\n'
        'üëâ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω–¥–∞ –≤ –Ω–æ–¥—ã üÜï\n'
        'üëâ –ó–∞—ë–º—ã üÜï\n'
    )
    TEXT_NO_ADDRESSES = "üîÜ –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å."
    TEXT_YOUR_ADDRESSES = 'üîÜ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∞–¥—Ä–µ—Å–∞:'
    TEXT_INVALID_ADDRESS = code('‚õîÔ∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞–¥—Ä–µ—Å–∞!')
    TEXT_SELECT_ADDRESS_ABOVE = '–í—ã–±–µ—Ä–∏ –∞–¥—Ä–µ—Å –≤—ã—à–µ ‚òùÔ∏è '
    TEXT_SELECT_ADDRESS_SEND_ME = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å, –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ üëá'
    TEXT_LP_NO_POOLS_FOR_THIS_ADDRESS = 'üì™ <i>–ù–∞ —ç—Ç–æ–º –∞–¥—Ä–µ—Å–µ –Ω–µ—Ç –ø—É–ª–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.</i>'
    TEXT_CANNOT_ADD = 'üòê –ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å.'
    TEXT_ANY = '–õ—é–±—ã–µ'

    TEXT_INVALID_LIMIT = '‚õî <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!</b> –í–∞–º —Å–ª–µ–¥—É–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.'

    BUTTON_CANCEL = '–û—Ç–º–µ–Ω–∞'

    BUTTON_WALLET_SETTINGS = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞'
    BUTTON_WALLET_NAME = '–ó–∞–¥–∞—Ç—å –∏–º—è'
    BUTTON_CLEAR_NAME = '–û—Ç–≤—è–∑–∞—Ç—å –∏–º—è'

    TEXT_NAME_UNSET = '–ò–º—è –±—ã–ª–æ –æ—Ç–≤—è–∑–∞–Ω–æ –æ—Ç –∞–¥—Ä–µ—Å–∞.'

    def text_set_rune_limit_threshold(self, address, curr_limit):
        return (
            f'üéö –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –†—É–Ω '
            f'–¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö –Ω–∞ —ç—Ç–æ–º –∞–¥—Ä–µ—Å–µ ({address}).\n'
            f'–°–µ–π—á–∞—Å —ç—Ç–æ: {ital(short_rune(curr_limit))}.\n\n'
            f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö.'
        )

    @staticmethod
    def text_my_wallet_settings(address, name='', min_limit=None):
        name_str = ''
        if name:
            name_str = f' ({ital(name)})'

        if min_limit is not None:
            limit_str = f'\n\nüì® –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚â• {short_rune(min_limit)} –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è.'
        else:
            limit_str = ''

        return (f'üéö –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ "{code(address)}"{name_str}.'
                f'{limit_str}')

    @staticmethod
    def text_my_wallet_name_changed(address, name):
        return f'üéâ –ù–æ–≤–æ–µ –∏–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ "{code(name)}" –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ —Å –∞–¥—Ä–µ—Å–æ–º "{code(address)}".'

    @staticmethod
    def text_wallet_name_dialog(address, name):
        message = (
            f'–î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏–º—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞ ({pre(address)}).\n'
        )
        if name:
            message += f'–¢–µ–∫—É—â–µ–µ –∏–º—è: "{code(name)}".\n'
        message += '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞</b> üëá'
        return message

    def text_lp_img_caption(self):
        bot_link = "@" + self.this_bot_name
        start_me = self.url_start_me
        return f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {link(start_me, bot_link)}'

    LP_PIC_TITLE = '–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'
    LP_PIC_POOL = '–ü–£–õ'
    LP_PIC_RUNE = 'RUNE'
    LP_PIC_ADDED = '–î–æ–±–∞–≤–ª–µ–Ω–æ'
    LP_PIC_WITHDRAWN = '–í—ã–≤–µ–¥–µ–Ω–æ'
    LP_PIC_REDEEM = '–ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å'
    LP_PIC_GAIN_LOSS = '–î–æ—Ö–æ–¥ / —É–±—ã—Ç–æ–∫'
    LP_PIC_IN_USD = '–≤ USD'
    LP_PIC_IN_USD_CAP = '–∏–ª–∏ –≤ USD'
    LP_PIC_R_RUNE = f'–í {RAIDO_GLYPH}une'
    LP_PIC_IN_ASSET = '–∏–ª–∏ –≤ {0}'
    LP_PIC_ADDED_VALUE = '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ'
    LP_PIC_WITHDRAWN_VALUE = '–í—ã–≤–µ–¥–µ–Ω–æ –≤—Å–µ–≥–æ'
    LP_PIC_CURRENT_VALUE = '–í –ø—É–ª–µ (+—á–∞–π)'
    LP_PIC_PRICE_CHANGE = '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã'
    LP_PIC_PRICE_CHANGE_2 = '—Å 1–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
    LP_PIC_LP_VS_HOLD = '–ü—Ä–æ—Ç–∏–≤ –•–û–õ–î'
    LP_PIC_LP_APY = '–ì–æ–¥–æ–≤—ã—Ö'
    LP_PIC_LP_APY_OVER_LIMIT = '–û—á–µ–Ω—å –º–Ω–æ–≥–æ %'
    LP_PIC_EARLY = '–ï—â–µ —Ä–∞–Ω–æ...'
    LP_PIC_FOOTER = ""  # my LP scanner is used
    LP_PIC_FEES = '–í–∞—à–∏ —á–∞–µ–≤—ã–µ'
    LP_PIC_IL_PROTECTION = '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç IL'
    LP_PIC_NO_NEED_PROTECTION = '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'
    LP_PIC_EARLY_TO_PROTECT = '–†–∞–Ω–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'
    LP_PIC_PROTECTION_DISABLED = '–û—Ç–∫–ª—é—á–µ–Ω–∞'

    LP_PIC_SUMMARY_HEADER = '–°–≤–æ–¥–∫–∞ –ø–æ –ø—É–ª–∞–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'
    LP_PIC_SUMMARY_ADDED_VALUE = '–î–æ–±–∞–≤–ª–µ–Ω–æ'
    LP_PIC_SUMMARY_WITHDRAWN_VALUE = '–í—ã–≤–µ–¥–µ–Ω–æ'
    LP_PIC_SUMMARY_CURRENT_VALUE = '–°–µ–π—á–∞—Å –≤ –ø—É–ª–µ'
    LP_PIC_SUMMARY_TOTAL_GAIN_LOSS = '–î–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫'
    LP_PIC_SUMMARY_TOTAL_GAIN_LOSS_PERCENT = '–î–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫ %'
    LP_PIC_SUMMARY_AS_IF_IN_RUNE = f'–ï—Å–ª–∏ –≤—Å–µ –≤ {RAIDO_GLYPH}'
    LP_PIC_SUMMARY_AS_IF_IN_USD = '–ï—Å–ª–∏ –≤—Å–µ –≤ $'
    LP_PIC_SUMMARY_TOTAL_LP_VS_HOLD = '–ò—Ç–æ–≥–æ —Ö–æ–ª–¥ –ø—Ä–æ—Ç–∏–≤ –ø—É–ª–æ–≤, $'
    LP_PIC_SUMMARY_NO_WEEKLY_CHART = "–ù–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞, –∏–∑–≤–∏–Ω–∏—Ç–µ..."

    def label_for_pool_button(self, pool_name):
        short_name = cut_long_text(pool_name)
        if LOAN_MARKER in pool_name:
            # strip LOAN_MARKER
            return f'–ó–∞—ë–º: {short_name[len(LOAN_MARKER):]}'

        if Asset(pool_name).is_synth:
            return f'–°–±–µ—Ä.: {short_name}'
        else:
            return f'–õ–∏–∫–≤.–ø—Ä.: {short_name}'

    def pic_lping_days(self, total_days, first_add_ts, extra=''):
        start_date = datetime.fromtimestamp(first_add_ts).strftime('%d.%m.%Y')
        extra = ' ' + extra if extra else ''
        return f'{ceil(total_days)} –¥–Ω.{extra} ({start_date})'

    TEXT_PLEASE_WAIT = '‚è≥ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</b>'

    def text_lp_loading_pools(self, address):
        return f'{self.TEXT_PLEASE_WAIT}\n' \
               f'–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞ {pre(address)}...\n' \
               f'–ò–Ω–æ–≥–¥–∞ –æ–Ω–∞ –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –¥–æ–ª–≥–æ, –µ—Å–ª–∏ Midgard —Å–∏–ª—å–Ω–æ –Ω–∞–≥—Ä—É–∂–µ–Ω.'

    def text_inside_my_wallet_title(self, address, pools, balances: ThorBalances, min_limit: float, chain,
                                    thor_name: Optional[ThorName], local_name, clout: Optional[ThorSwapperClout]):
        if pools:
            title = '\n'
            footer = '\n\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏.'
        else:
            title = self.TEXT_LP_NO_POOLS_FOR_THIS_ADDRESS + '\n\n'
            footer = ''

        explorer_links = self.explorer_link_to_address_with_domain(address)

        balance_str = self.text_balances(balances, '–ë–∞–ª–∞–Ω—Å—ã –∞–∫–∫–∞—É–Ω—Ç–∞: ')

        if clout:
            score_text = pretty_rune(thor_to_float(clout.score))
            reclaimed_text = pretty_rune(thor_to_float(clout.reclaimed))
            spent_text = pretty_rune(thor_to_float(clout.spent))
            clout_text = f'–≤—Å–µ–≥–æ {bold(score_text)} | –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {bold(reclaimed_text)} | –ø–æ—Ç—Ä–∞—á–µ–Ω–æ {bold(spent_text)}'
            balance_str += f'–í–ª–∏—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {clout_text}\n\n'

        acc_caption = ''
        if thor_name:
            acc_caption += f' | THORName: {code(add_thor_suffix(thor_name))}'
        if local_name:
            acc_caption += f' | –ò–º—è: {code(local_name)}'

        thor_yield_url = get_thoryield_address(self.cfg.network_id, address, chain)
        thor_yield_link = link(thor_yield_url, 'THORYield')

        if min_limit is not None:
            limit_str = f'üì® –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚â• {short_rune(min_limit)} –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è.\n'
        else:
            limit_str = ''

        return (
            f'üõ≥Ô∏è –ê–∫–∫–∞—É–Ω—Ç: "{pre(address)}"{acc_caption}\n'
            f'{title}'
            f"{balance_str}"
            f'{limit_str}'
            f"üîç –û–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å: {explorer_links}\n"
            f"üåé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ {thor_yield_link}"
            f"{footer}"
        )

    def text_lp_today(self):
        today = datetime.now().strftime('%d.%m.%Y')
        return f'–°–µ–≥–æ–¥–Ω—è: {today}'

    TEXT_LP_NO_LOAN_FOR_THIS_ADDRESS = 'üì™ <i>–ù–∞ —ç—Ç–æ–º –∞–¥—Ä–µ—Å–µ –Ω–µ—Ç –∑–∞—ë–º–æ–≤ –≤ –ø—É–ª–µ {pool}.</i>'

    # ----- CAP ------

    def can_add_more_lp_text(self, cap: ThorCapInfo):
        if cap.can_add_liquidity:
            return (
                f'ü§≤üèª –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {bold(short_rune(cap.how_much_rune_you_can_lp))} {self.R} '
                f'–∏–ª–∏ {bold(short_dollar(cap.how_much_usd_you_can_lp))}.'
            )
        else:
            return f"üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏. –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª!"

    def notification_text_cap_change(self, old: ThorCapInfo, new: ThorCapInfo):
        up = old.cap < new.cap
        verb = "–ø–æ–¥—Ä–æ—Å" if up else "—É–ø–∞–ª"
        arrow = '‚¨ÜÔ∏è' if up else '‚ö†Ô∏è ‚¨áÔ∏è'
        call = "–ê–π-–¥–∞ –∑–∞–ø—É–ª–∏–º –µ—â–µ!\n" if up else ''
        return (
            f'{arrow} <b>–ö–∞–ø {verb} —Å {pretty_money(old.cap)} –¥–æ {pretty_money(new.cap)}!</b>\n'
            f'–°–µ–π—á–∞—Å –≤ –ø—É–ª—ã –ø–æ–º–µ—â–µ–Ω–æ <b>{pretty_money(new.pooled_rune)}</b> {self.R}.\n'
            f"{self._cap_progress_bar(new)}\n"
            f"{self.can_add_more_lp_text(new)}\n"
            f'–¶–µ–Ω–∞ {self.R} –≤ –ø—É–ª–µ <code>{new.price:.3f} $</code>.\n'
            f'{call}'
            f'{self.thor_site()}'
        )

    def notification_text_cap_full(self, cap: ThorCapInfo):
        return (
            'üôÜ‚Äç‚ôÄÔ∏è <b>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–µ–ª–∞!</b>\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∏—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª—ã. '
            '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤!\n'
            f'<b>{pretty_money(cap.pooled_rune)} {self.R}</b> –∏–∑ '
            f"<b>{pretty_money(cap.cap)} {self.R}</b> —Å–µ–π—á–∞—Å –≤ –ø—É–ª–∞—Ö.\n"
            f"{self._cap_progress_bar(cap)}\n"
        )

    def notification_text_cap_opened_up(self, cap: ThorCapInfo):
        return (
            'üí° <b>–û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏!</b>\n'
            f'–°–µ–π—á–∞—Å –≤ –ø—É–ª–∞—Ö <i>{short_rune(cap.pooled_rune)} {self.R}</i> –∏–∑ '
            f"<i>{pretty_money(cap.cap)} {self.R}</i> –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö.\n"
            f"{self._cap_progress_bar(cap)}\n"
            f'ü§≤üèª –í—ã –º–æ–∂–µ—â–µ –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å {bold(short_rune(cap.how_much_rune_you_can_lp))} {self.R} '
            f'–∏–ª–∏ {bold(pretty_dollar(cap.how_much_usd_you_can_lp))}.\nüëâüèª {self.thor_site()}'
        )

    # ------ PRICE -------

    PRICE_GRAPH_TITLE = f'THORChain {RAIDO_GLYPH}une —Ü–µ–Ω–∞'
    PRICE_GRAPH_LEGEND_DET_PRICE = '–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç—Å–∫–∞—è —Ü–µ–Ω–∞'
    PRICE_GRAPH_LEGEND_ACTUAL_PRICE = '–¶–µ–Ω–∞ –≤ –ø—É—Ö–∞–ª'
    PRICE_GRAPH_LEGEND_CEX_PRICE = f'–¶–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ'
    PRICE_GRAPH_VOLUME_SWAP_NORMAL = '–û–±—ä–µ–º –æ–±–º–µ–Ω–æ–≤'
    PRICE_GRAPH_VOLUME_SWAP_SYNTH = '–û–±—ä–µ–º —Å–∏–Ω—Ç–µ—Ç–∏–∫–æ–≤'
    PRICE_GRAPH_VOLUME_SWAP_ADD = '–û–±—ä–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
    PRICE_GRAPH_VOLUME_SWAP_WITHDRAW = '–û–±—ä–µ–º –∏–∑—ä—è—Ç–∏—è'

    # ------ TXS -------

    TEXT_MORE_TXS = ' –∏ {n} –µ—â–µ'

    @staticmethod
    def none_str(x):
        return '–Ω–µ—Ç' if x is None else x

    def notification_text_large_single_tx(self, e: EventLargeTransaction, name_map: NameMap):
        usd_per_rune, pool_info, tx = e.usd_per_rune, e.pool_info, e.transaction

        (ap, asset_side_usd_short, chain, percent_of_pool, pool_depth_usd, rp, rune_side_usd_short,
         total_usd_volume) = self.lp_tx_calculations(usd_per_rune, pool_info, tx)

        heading = ''
        if tx.is_of_type(ActionType.ADD_LIQUIDITY):
            if tx.is_savings:
                heading = f'üê≥‚Üíüí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç</b>'
            else:
                heading = f'üê≥‚Üí‚ö° <b>–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏</b>'
        elif tx.is_of_type(ActionType.WITHDRAW):
            if tx.is_savings:
                heading = f'üê≥‚Üêüí∞ <b>–í—ã–≤–µ–¥–µ–Ω–æ —Å–æ —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞</b>'
            else:
                heading = f'üê≥‚Üê‚ö° <b>–í—ã–≤–µ–¥–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å</b>'
        elif tx.is_of_type(ActionType.DONATE):
            heading = f'üôå <b>–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ø—É–ª</b>'
        elif tx.is_of_type(ActionType.SWAP):
            if tx.is_streaming:
                heading = f'üåä <b>–ü–æ—Ç–æ–∫–æ–≤—ã–π –æ–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω</b> üîÅ'
            else:
                heading = f'üê≥ <b>–ö—Ä—É–ø–Ω—ã–π –æ–±–º–µ–Ω</b> üîÅ'
        elif tx.is_of_type(ActionType.REFUND):
            heading = f'üê≥Ô∏è <b>–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤</b> ‚Ü©Ô∏è‚ùó'

        if tx.is_pending:
            heading += ital(' [–û–∂–∏–¥–∞–µ—Ç]')

        # it is old
        if date_text := self.tx_date(tx):
            heading += ital(f' {date_text}')

        asset = Asset(tx.first_pool).name

        content = f''

        if tx.is_of_type((ActionType.ADD_LIQUIDITY, ActionType.WITHDRAW, ActionType.DONATE)):
            if tx.affiliate_fee > 0:
                aff_fee_usd = tx.get_affiliate_fee_usd(usd_per_rune)
                mark = self._exclamation_sign(aff_fee_usd, 'fee_usd_limit')
                aff_text = f'–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–æ–Ω—É—Å: {bold(short_dollar(aff_fee_usd))}{mark} ' \
                           f'({format_percent(tx.affiliate_fee, 1)})\n'
            else:
                aff_text = ''

            ilp_rune = tx.meta_withdraw.ilp_rune if tx.meta_withdraw else 0
            if ilp_rune > 0:
                ilp_usd = ilp_rune * usd_per_rune
                mark = self._exclamation_sign(ilp_usd, 'ilp_usd_limit')
                ilp_text = f'üõ°Ô∏è –í—ã–ø–ª–∞—á–µ–Ω–æ –∑–∞—â–∏—Ç—ã –æ—Ç IL: {code(short_rune(ilp_rune))}{mark} ' \
                           f'({pretty_dollar(ilp_usd)})\n'
            else:
                ilp_text = ''

            if tx.is_savings:
                amount_more, asset_more, saver_pb, saver_cap, saver_percent = \
                    self.get_savers_limits(pool_info, usd_per_rune, e.mimir, tx.asset_amount)
                saver_cap_part = f'–ö–∞–ø —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π {saver_pb}. '

                # todo
                if self.show_add_more and amount_more > 0:
                    saver_cap_part += f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {pre(short_money(amount_more))} {pre(asset_more)}.'

                vault_percent_part = f", {saver_percent:.2f}% –æ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞" \
                    if saver_percent >= self.MIN_PERCENT_TO_SHOW else ''
                asset_part = f"{bold(short_money(tx.asset_amount))} {asset}"

                content = (
                    f"{asset_part} ({code(short_dollar(total_usd_volume))}{vault_percent_part})\n"
                    f"{aff_text}"
                    f"{ilp_text}"
                    f"{saver_cap_part}"
                )
            else:
                rune_part = f"{bold(short_money(tx.rune_amount))} {self.R} ({rune_side_usd_short}) ‚ÜîÔ∏è "
                asset_part = f"{bold(short_money(tx.asset_amount))} {asset} ({asset_side_usd_short})"
                pool_depth_part = f'–ì–ª—É–±–∏–Ω–∞ –ø—É–ª–∞ {bold(short_dollar(pool_depth_usd))} —Å–µ–π—á–∞—Å.'
                pool_percent_part = f" ({percent_of_pool:.2f}% –æ—Ç –≤—Å–µ–≥–æ –ø—É–ª–∞)" \
                    if percent_of_pool >= self.MIN_PERCENT_TO_SHOW else ''

                content = (
                    f"{rune_part}{asset_part}\n"
                    f"–í—Å–µ–≥–æ: <code>${pretty_money(total_usd_volume)}</code>{pool_percent_part}\n"
                    f"{aff_text}"
                    f"{ilp_text}"
                    f"{pool_depth_part}\n"
                )
        elif tx.is_of_type(ActionType.REFUND):
            reason = shorten_text(tx.meta_refund.reason, 180)
            content += (
                    self.format_swap_route(tx, usd_per_rune) +
                    f"\n–ü—Ä–∏—á–∏–Ω–∞: {pre(reason)}"
            )
        elif tx.is_of_type(ActionType.SWAP):
            content += self.format_swap_route(tx, usd_per_rune)
            slip_str = f'{tx.meta_swap.trade_slip_percent:.3f} %'
            l_fee_usd = tx.meta_swap.liquidity_fee_rune_float * usd_per_rune

            if tx.affiliate_fee > 0:
                aff_fee_usd = tx.get_affiliate_fee_usd(usd_per_rune)
                mark = self._exclamation_sign(aff_fee_usd, 'fee_usd_limit')

                aff_collector = self.name_service.get_affiliate_name(tx.memo.affiliate_address)
                aff_collector = f'{aff_collector} ' if aff_collector else ''

                aff_text = f'{aff_collector}–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–æ–Ω—É—Å: {bold(short_dollar(aff_fee_usd))}{mark} ' \
                           f'({format_percent(tx.affiliate_fee, 1)})\n'
            else:
                aff_text = ''

            slip_mark = self._exclamation_sign(l_fee_usd, 'slip_usd_limit')
            content += (
                f"\n{aff_text}"
                f"–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {bold(slip_str)}\n"
                f"–ö–æ–º–∏—Å—Å–∏—è –ø—É–ª–∞–º: {bold(pretty_dollar(l_fee_usd))}{slip_mark}"
            )

            if tx.is_streaming:
                duration = tx.meta_swap.streaming.total_duration
                content += f'\n‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {self.seconds_human(duration)}.'

                if (success := tx.meta_swap.streaming.success_rate) < 1.0:
                    good = tx.meta_swap.streaming.successful_swaps
                    total = tx.meta_swap.streaming.quantity
                    content += f'\n–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {format_percent(success, 1)} ({good}/{total})'

                saved_usd = tx.meta_swap.estimated_savings_vs_cex_usd
                if (saved_usd is not None) and saved_usd > 0.0:
                    content += f'\nü´∞–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤ CEX: {bold(pretty_dollar(saved_usd))}'

        blockchain_components_str = self._add_input_output_links(
            tx, name_map, '–í—Ö–æ–¥—ã: ', '–í—ã—Ö–æ–¥—ã: ', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ')

        msg = f"{heading}\n" \
              f"{blockchain_components_str}\n" \
              f"{content}"

        return msg.strip()

    def notification_text_streaming_swap_started(self, e: AlertSwapStart, name_map: NameMap):
        user_link = self.link_to_address(e.from_address, name_map)

        tx_link = link(self.url_for_tx_tracker(e.tx_id), '–û—Ç—Å–ª–µ–¥–∏—Ç—å')

        asset_str = Asset(e.in_asset).pretty_str
        amount_str = self.format_op_amount(e.in_amount_float)
        target_asset_str = Asset(e.out_asset).pretty_str
        total_duration_str = self.seconds_human(e.ss.total_duration)

        clout_str = ''
        if e.clout and e.clout.score > 10_000:
            clout_str = f' / {bold(pretty_rune(thor_to_float(e.clout.score)))} –≤–ª–∏—è–Ω–∏—è'

        if e.ss.quantity > 0:
            dur_str = (
                f'{e.ss.quantity} –æ–±–º–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ {e.ss.interval} –±–ª–æ–∫–æ–≤, '
                f'–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {ital(total_duration_str)} + –∑–∞–¥–µ—Ä–∂–∫–∞.'
            )
        else:
            dur_str = f'–û–±–º–µ–Ω—ã –∫–∞–∂–¥—ã–µ {e.ss.interval} –±–ª–æ–∫–æ–≤.'

        return (
            'üåä <b>–ü–æ—Ç–æ–∫–æ–≤—ã–π –æ–±–º–µ–Ω –Ω–∞—á–∞–ª—Å—è</b>\n'
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link} / {tx_link}{clout_str}\n'
            f'{amount_str} {asset_str} ({short_dollar(e.volume_usd)}) ‚Üí ‚ö° ‚Üí {bold(target_asset_str)}\n'
            f'{dur_str}'
        )

    # ------- QUEUE -------

    def notification_text_queue_update(self, item_type, is_free, value):
        if is_free:
            return f"‚ò∫Ô∏è –û—á–µ—Ä–µ–¥—å {item_type} —Å–Ω–æ–≤–∞ –æ–ø—É—Å—Ç–µ–ª–∞!"
        else:
            if item_type != 'internal':
                extra = f"\n[{item_type}] —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–≥—É—Ç –∑–∞–ø–∞–∑–¥—ã–≤–∞—Ç—å."
            else:
                extra = ''

            return f"ü§¨ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –û—á–µ—Ä–µ–¥—å {code(item_type)} –∏–º–µ–µ—Ç {value} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!{extra}"

    # ------- PRICE -------

    TEXT_PRICE_NO_DATA = '–ò–∑–≤–∏–Ω–∏—Ç–µ. –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'

    def notification_text_price_update(self, p: AlertPrice):
        title = bold('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã') if not p.is_ath else bold('üöÄ –î–æ—Å—Ç–∏–≥–Ω—É—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º!')

        c_gecko_url = 'https://www.coingecko.com/ru/' \
                      '%D0%9A%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D0%B0%D0%BB%D1%8E%D1%82%D1%8B/thorchain'
        c_gecko_link = link(c_gecko_url, 'RUNE')

        message = f"{title} | {c_gecko_link}\n\n"

        if p.halted_chains:
            hc = pre(', '.join(p.halted_chains))
            message += f"üö® <code>–¢–æ—Ä–≥–æ–≤–ª—è –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {hc}.</code>\n\n"

        price = p.market_info.pool_rune_price

        btc_price = f"‚Çø {p.btc_pool_rune_price:.8f}"
        pr_text = f"${price:.3f}"
        message += f"–¶–µ–Ω–∞ <b>RUNE</b> —Å–µ–π—á–∞—Å {code(pr_text)} ({btc_price}).\n"

        fp = p.market_info

        if fp.cex_price > 0.0:
            message += f"–¶–µ–Ω–∞ <b>RUNE</b> –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ {self.ref_cex_name}: " \
                       f"{bold(pretty_dollar(fp.cex_price))}.\n"

            div, div_p = fp.divergence_abs, fp.divergence_percent
            message += f"<b>–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ</b> —Å —Ü–µ–Ω—Ç—Ä. –ë–∏—Ä–∂–µ–π: {code(pretty_dollar(div))} ({div_p:.1f}%).\n"

        last_ath = p.last_ath
        if last_ath is not None and p.is_ath:
            if isinstance(last_ath.ath_date, float):
                last_ath_pr = f'{last_ath.ath_price:.2f}'
            else:
                last_ath_pr = str(last_ath.ath_price)
            ago_str = self.format_time_ago(now_ts() - last_ath.ath_date)
            message += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π ATH –±—ã–ª ${pre(last_ath_pr)} ({ago_str}).\n"

        time_combos = zip(
            ('1—á.', '24—á.', '7–¥–Ω.'),
            (p.price_1h, p.price_24h, p.price_7d)
        )
        for title, old_price in time_combos:
            if old_price:
                pc = calc_percent_change(old_price, price)
                message += pre(f"{title.rjust(5)}:{adaptive_round_to_str(pc, True).rjust(8)} % "
                               f"{emoji_for_percent_change(pc).ljust(4).rjust(6)}") + "\n"

        if fp.rank >= 1:
            message += f"–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {bold(pretty_dollar(fp.market_cap))} (#{bold(fp.rank)} –º–µ—Å—Ç–æ)\n"

        if fp.total_trade_volume_usd > 0:
            message += f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {bold(pretty_dollar(fp.total_trade_volume_usd))}.\n"

        message += '\n'

        if fp.tlv_usd >= 1:
            message += (f"TVL (–Ω–µ-RUNE –∞–∫—Ç–∏–≤–æ–≤): ${bold(pretty_money(fp.tlv_usd))}\n"
                        f"–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞: {code(pretty_money(fp.fair_price, prefix='$'))}\n"
                        f"–°–ø–µ–∫—É–ª—è—Ç–∏–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {pre(x_ses(fp.fair_price, price))}\n")

        return message.rstrip()

    # ------- POOL CHURN -------

    def notification_text_pool_churn(self, pc: PoolChanges):
        if pc.pools_changed:
            message = bold('üèä –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:') + '\n\n'
        else:
            message = ''

        ru_stat = {
            PoolInfo.DEPRECATED_ENABLED: '–≤–∫–ª—é—á–µ–Ω',
            PoolInfo.AVAILABLE: '–≤–∫–ª—é—á–µ–Ω',
            PoolInfo.SUSPENDED: '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',

            PoolInfo.DEPRECATED_BOOTSTRAP: '–æ–∂–∏–¥–∞–µ—Ç',
            PoolInfo.STAGED: '–æ–∂–∏–¥–∞–µ—Ç'
        }

        def pool_text(pool_name, status, to_status=None):
            if PoolInfo.is_status_enabled(to_status):
                extra = 'üéâ –ü–£–õ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!'
            else:
                extra = ital(ru_stat.get(str(status).lower(), ''))
                if to_status is not None:
                    to_stat_str = ital(ru_stat.get(str(to_status).lower(), ''))
                    extra += f' ‚Üí {to_stat_str}'
                extra = f'({extra})'
            return f'  ‚Ä¢ {self.pool_link(pool_name)}: {extra}'

        if pc.pools_added:
            message += '‚úÖ –ü—É–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n' + '\n'.join([pool_text(*a) for a in pc.pools_added]) + '\n'
        if pc.pools_removed:
            message += '‚ùå –ü—É–ª—ã —É–¥–∞–ª–µ–Ω—ã:\n' + '\n'.join([pool_text(*a) for a in pc.pools_removed]) + '\n'
        if pc.pools_changed:
            message += 'üîÑ –ü—É–ª—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:\n' + '\n'.join([pool_text(*a) for a in pc.pools_changed]) + '\n'

        return message.rstrip()

    # -------- SETTINGS --------

    TEXT_SETTING_INTRO = '<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö?'
    BUTTON_SET_LANGUAGE = 'üåê –Ø–∑—ã–∫'
    BUTTON_SET_NODE_OP_GOTO = 'üñ• –û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –Ω–æ–¥'
    BUTTON_SET_PRICE_DIVERGENCE = '‚ÜïÔ∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω'

    TEXT_SETTINGS_LANGUAGE_SELECT = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please select a language'

    # ------- PERSONAL PRICE DIVERGENCE -------

    TEXT_PRICE_DIV_MIN_PERCENT = (
        '‚ÜïÔ∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ü–µ–Ω –†—É–Ω—ã –Ω–∞ –±–∏—Ä–∂–µ –∏ –†—É–Ω—ã –≤ –ø—É–ª–∞—Ö.\n'
        '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ <b>–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π</b> –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (<i>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º 0.1</i>).\n'
        '–ï—Å–ª–∏ –≤—ã, –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ"'
    )

    BUTTON_PRICE_DIV_NEXT = '–î–∞–ª–µ–µ ‚è≠Ô∏è'
    BUTTON_PRICE_DIV_TURN_OFF = '–í—ã–∫–ª—é—á–∏—Ç—å üì¥'

    TEXT_PRICE_DIV_TURNED_OFF = '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ü–µ–Ω –≤—ã–∫–ª—é—á–µ–Ω—ã.'

    TEXT_PRICE_DIV_MAX_PERCENT = (
        '–•–æ—Ä–æ—à–æ!\n'
        '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π</b> –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (<i>–Ω–µ –±–æ–ª–µ–µ 100%</i>).\n'
        '–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ"'
    )

    TEXT_PRICE_DIV_INVALID_NUMBER = '<code>–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!</code> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'

    @staticmethod
    def text_price_div_finish_setup(min_percent, max_percent):
        message = '‚úîÔ∏è –ì–æ—Ç–æ–≤–æ!\n'
        if min_percent is None and max_percent is None:
            message += 'üîò –í—ã <b>–Ω–µ</b> –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ü–µ–Ω.'
        else:
            message += '–í–∞—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n'
            if min_percent:
                message += f'‚Üí –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω –†—É–Ω &lt;= {pretty_money(min_percent)}%\n'
            if max_percent:
                message += f'‚Üí –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω –†—É–Ω &gt;= {pretty_money(max_percent)}%\n'
        return message.strip()

    def notification_text_price_divergence(self, info: RuneMarketInfo, is_low: bool):
        title = f'„Ä∞ –ù–∏–∑–∫–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã!' if is_low else f'üî∫ –í—ã—Å–æ–∫–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã!'

        div, div_p = info.divergence_abs, info.divergence_percent
        text = (
            f"üññ {bold(title)}\n"
            f"–¶–µ–Ω–∞ –†—É–Ω—ã (–Ω–∞ –±–∏—Ä–∂–∞—Ö): {code(pretty_dollar(info.cex_price))}\n"
            f"–í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –†—É–Ω—ã –≤ –ø—É–ª–∞—Ö: {code(pretty_dollar(info.pool_rune_price))}\n"
            f"<b>–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ</b> —Ü–µ–Ω—ã THORChain –∏ –±–∏—Ä–∂—ã: {code(pretty_dollar(div))} ({div_p:.1f}%)."
        )

        return text

    # -------- METRICS ----------

    BUTTON_METR_S_FINANCIAL = 'üí± –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ'
    BUTTON_METR_S_NET_OP = 'üî© –†–∞–±–æ—Ç–∞ —Å–µ—Ç–∏'

    BUTTON_METR_CAP = '‚úã –ö–∞–ø –ª–∏–≤–∫–∏–¥–Ω–æ—Å—Ç–∏'
    BUTTON_METR_PRICE = f'üí≤ {BaseLocalization.R} –∏–Ω—Ñ–æ –æ —Ü–µ–Ω–µ'
    BUTTON_METR_QUEUE = f'üë• –û—á–µ—Ä–µ–¥—å'
    BUTTON_METR_STATS = f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    BUTTON_METR_NODES = 'üñ• –ù–æ–¥—ã (—É–∑–ª—ã)'
    BUTTON_METR_LEADERBOARD = 'üèÜ –î–æ—Å–∫–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤'
    BUTTON_METR_SAVERS = 'üí∞ –°–±–µ—Ä–µ–∂–µ–Ω–∏—è'
    BUTTON_METR_CHAINS = '‚õìÔ∏è –ë–ª–æ–∫—á–µ–π–Ω—ã'
    BUTTON_METR_MIMIR = 'üéÖ –ú–∏–º–∏—Ä'
    BUTTON_METR_VOTING = 'üèõÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ'
    BUTTON_METR_BLOCK_TIME = '‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–æ–≤'
    BUTTON_METR_TOP_POOLS = 'üèä –¢–æ–ø –ü—É–ª–æ–≤'
    BUTTON_METR_CEX_FLOW = 'üå¨ –ü–æ—Ç–æ–∫ –±–∏—Ä–∂'
    BUTTON_METR_SUPPLY = f'ü™ô Rune –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
    BUTTON_METR_DEX_STATS = f'ü§π DEX –ê–≥—Ä. —Å—Ç–∞—Ç—ã'

    TEXT_METRICS_INTRO = '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?'

    def cap_message(self, info: ThorCapInfo):
        return (
            f"<b>{pretty_money(info.pooled_rune)} {RAIDO_GLYPH} {self.R}</b> –º–æ–Ω–µ—Ç –∏–∑ "
            f"<b>{pretty_money(info.cap)} {RAIDO_GLYPH} {self.R}</b> —Å–µ–π—á–∞—Å –≤ –ø—É–ª–∞—Ö.\n"
            f"{self._cap_progress_bar(info)}\n"
            f"{self.can_add_more_lp_text(info)}\n"
            f"–¶–µ–Ω–∞ {bold(self.R)} —Å–µ–π—á–∞—Å <code>{info.price:.3f} $</code>.\n"
        )

    def text_leaderboard_info(self):
        return f"üèÜ –î–æ—Å–∫–∞ –ª—É—à—á–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ THORChain:\n" \
               f"\n" \
               f" üëâ {bold(URL_LEADERBOARD_MCCN)} üëà\n"

    def queue_message(self, queue_info: QueueInfo):
        return (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥—è—Ö:</b>\n"
            f"–ò—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (outbound): {code(queue_info.outbound)} —à—Ç.\n"
            f"–û—á–µ—Ä–µ–¥—å –æ–±–º–µ–Ω–æ–≤ (swap): {code(queue_info.swap)} —à—Ç.\n"
            f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å (internal): {code(queue_info.internal)} —à—Ç.\n"
        ) + (
            f"–ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≤–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–±—ã—á–Ω–æ."
            if queue_info.is_full else ''
        )

    TEXT_ASK_DURATION = '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?'

    BUTTON_1_HOUR = '1 —á–∞—Å–æ–≤'
    BUTTON_24_HOURS = '24 —á–∞—Å–∞'
    BUTTON_1_WEEK = '1 –Ω–µ–¥–µ–ª—è'
    BUTTON_30_DAYS = '30 –¥–Ω–µ–π'

    # ------- AVATAR -------

    TEXT_AVA_WELCOME = 'üñºÔ∏è –°–∫–∏–Ω—å –º–Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —Ñ–æ—Ç–æ, –∏ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è –∞–≤–∞—Ç–∞—Ä –≤ —Å—Ç–∏–ª–µ THORChain ' \
                       '—Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–π —Ä–∞–º–∫–æ–π. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, ' \
                       '—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø–æ—Ç–µ—Ä–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑-–∑–∞ —Å–∂–∞—Ç–∏—è.'

    TEXT_AVA_ERR_INVALID = '‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞!'
    TEXT_AVA_ERR_NO_PIC = '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è!'
    TEXT_AVA_READY = 'ü•≥ <b>–¢–≤–æ–π THORChain –∞–≤–∞—Ç–∞—Ä –≥–æ—Ç–æ–≤!</b> ' \
                     '–°–∫–∞—á–∞–π —ç—Ç–æ —Ñ–æ—Ç–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.'

    BUTTON_AVA_FROM_MY_USERPIC = 'üòÄ –ò–∑ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è'

    # ------- NETWORK SUMMARY -------

    def network_bond_security_text(self, network_security_ratio):
        if network_security_ratio > 0.9:
            return "ü•± –ù–ï–≠–§–§–ï–ö–¢–ò–í–ù–ê"
        elif 0.9 >= network_security_ratio > 0.75:
            return "ü•∏ –ü–ï–†–ï–û–ë–ï–°–ü–ï–ß–ï–ù–ê"
        elif 0.75 >= network_security_ratio >= 0.6:
            return "‚ö° –û–ü–¢–ò–ú–ê–õ–¨–ù–ê"
        elif 0.6 > network_security_ratio >= 0.5:
            return "ü§¢ –ù–ï–î–û–û–ë–ï–°–ü–ï–ß–ï–ù–ê"
        elif network_security_ratio == 0:
            return 'üöß –î–ê–ù–ù–´–ï –ù–ï –ü–û–õ–£–ß–ï–ù–´...'
        else:
            return "ü§¨ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –ù–ï–ë–ï–ó–û–ü–ê–°–ù–ê"

    def notification_text_network_summary(self, e: AlertNetworkStats):
        new, old, nodes = e.new, e.old, e.nodes

        message = bold('üåê THORChain —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') + '\n\n'

        # --------------- NODES / SECURITY --------------------

        sec_ratio = self.get_network_security_ratio(new, nodes)
        if sec_ratio > 0:
            # security_pb = progressbar(sec_ratio, 1.0, 12)
            security_text = self.network_bond_security_text(sec_ratio)
            message += f'üï∏Ô∏è –°–µ–π—á–∞—Å —Å–µ—Ç—å {bold(security_text)}.\n'

        active_nodes_change = bracketify(up_down_arrow(old.active_nodes, new.active_nodes, int_delta=True))
        standby_nodes_change = bracketify(up_down_arrow(old.active_nodes, new.active_nodes, int_delta=True))
        message += f"üñ•Ô∏è {bold(new.active_nodes)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥{active_nodes_change} " \
                   f"–∏ {bold(new.standby_nodes)} –Ω–æ–¥ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è{standby_nodes_change}.\n"

        # --------------- NODE BOND --------------------

        current_bond_text = bold(short_rune(new.total_active_bond_rune))
        current_bond_change = bracketify(
            up_down_arrow(old.total_active_bond_rune, new.total_active_bond_rune, money_delta=True))

        current_bond_usd_text = bold(short_dollar(new.total_active_bond_usd))
        current_bond_usd_change = bracketify(
            up_down_arrow(old.total_active_bond_usd, new.total_active_bond_usd, money_delta=True, money_prefix='$')
        )

        current_total_bond_text = bold(short_rune(new.total_bond_rune))
        current_total_bond_change = bracketify(
            up_down_arrow(old.total_bond_rune, new.total_bond_rune, money_delta=True))

        current_total_bond_usd_text = bold(short_dollar(new.total_bond_usd))
        current_total_bond_usd_change = bracketify(
            up_down_arrow(old.total_bond_usd, new.total_bond_usd, money_delta=True, money_prefix='$')
        )

        message += f"üîó –ë–æ–Ω–¥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥: {current_bond_text}{current_bond_change} –∏–ª–∏ " \
                   f"{current_bond_usd_text}{current_bond_usd_change}.\n"

        message += f"üîó –ë–æ–Ω–¥ –≤—Å–µ—Ö –Ω–æ–¥: {current_total_bond_text}{current_total_bond_change} –∏–ª–∏ " \
                   f"{current_total_bond_usd_text}{current_total_bond_usd_change}.\n"

        # --------------- POOLED RUNE --------------------

        current_pooled_text = bold(short_rune(new.total_rune_lp))
        current_pooled_change = bracketify(
            up_down_arrow(old.total_rune_lp, new.total_rune_lp, money_delta=True))

        current_pooled_usd_text = bold(short_dollar(new.total_pooled_usd))
        current_pooled_usd_change = bracketify(
            up_down_arrow(old.total_pooled_usd, new.total_pooled_usd, money_delta=True, money_prefix='$'))

        message += f"üèä –í—Å–µ–≥–æ –≤ –ø—É–ª–∞—Ö: {current_pooled_text}{current_pooled_change} –∏–ª–∏ " \
                   f"{current_pooled_usd_text}{current_pooled_usd_change}.\n"

        # ----------------- LIQUIDITY / BOND / RESERVE --------------------------------

        current_liquidity_usd_text = bold(short_dollar(new.total_liquidity_usd))
        current_liquidity_usd_change = bracketify(
            up_down_arrow(old.total_liquidity_usd, new.total_liquidity_usd, money_delta=True, money_prefix='$'))

        message += f"üåä –í—Å–µ–≥–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (TVL): {current_liquidity_usd_text}{current_liquidity_usd_change}.\n"

        tlv_change = bracketify(
            up_down_arrow(old.total_locked_usd, new.total_locked_usd, money_delta=True, money_prefix='$'))
        message += f'üè¶ TVL + –±–æ–Ω–¥—ã –Ω–æ–¥: {code(short_dollar(new.total_locked_usd))}{tlv_change}.\n'

        reserve_change = bracketify(up_down_arrow(old.reserve_rune, new.reserve_rune,
                                                  postfix=RAIDO_GLYPH, money_delta=True))
        message += f'üí∞ –†–µ–∑–µ—Ä–≤—ã: {bold(short_rune(new.reserve_rune))}{reserve_change}.\n'

        # ----------------- ADD/WITHDRAW STATS -----------------

        message += '\n'
        message += f'{ital(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏:")}\n'

        price = new.usd_per_rune

        if old.is_ok:
            # 24 h Add/withdrawal
            added_24h_rune = new.added_rune - old.added_rune
            withdrawn_24h_rune = new.withdrawn_rune - old.withdrawn_rune

            add_rune_text = bold(short_rune(added_24h_rune))
            withdraw_rune_text = bold(short_rune(withdrawn_24h_rune))

            add_usd_text = short_dollar(added_24h_rune * price)
            withdraw_usd_text = short_dollar(withdrawn_24h_rune * price)

            if added_24h_rune:
                message += f'‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø—É–ª—ã: {add_rune_text} ({add_usd_text}).\n'

            if withdrawn_24h_rune:
                message += f'‚ûñ –í—ã–≤–µ–¥–µ–Ω–æ –∏–∑ –ø—É–ª–æ–≤: {withdraw_rune_text} ({withdraw_usd_text}).\n'

            message += '\n'

        synth_volume_usd = code(short_dollar(new.synth_volume_24h_usd))
        synth_op_count = short_money(new.synth_op_count)

        trade_volume_usd = code(short_dollar(new.trade_volume_24h_usd))
        trade_op_count = short_money(new.trade_op_count)

        swap_usd_text = code(short_dollar(new.swap_volume_24h_usd))
        swap_op_count = bold(short_money(new.swaps_24h))

        message += f'üîÄ –í—Å–µ–≥–æ –æ–±—ä–µ–º—ã: {swap_usd_text} –∑–∞ {swap_op_count} –æ–ø–µ—Ä–∞—Ü–∏–π.\n'
        message += f'üÜï –û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ {trade_volume_usd} –∑–∞ {trade_op_count} –æ–ø–µ—Ä–∞—Ü–∏–π.\n'
        message += f'–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–∏–Ω—Ç–µ—Ç–∏–∫–∞–º–∏ {synth_volume_usd} –∑–∞ {synth_op_count} –æ–ø–µ—Ä–∞—Ü–∏–π.\n'

        # ---------------- APY -----------------

        message += '\n'

        bonding_apy_change, liquidity_apy_change = self._extract_apy_deltas(new, old)
        message += (
            f'üìà –î–æ—Ö–æ–¥ –æ—Ç –±–æ–Ω–¥–æ–≤ –≤ –Ω–æ–¥–∞—Ö, –≥–æ–¥–æ–≤—ã—Ö: '
            f'{code(pretty_money(new.bonding_apy, postfix="%"))}{bonding_apy_change} –∏ '
            f'–¥–æ—Ö–æ–¥ –æ—Ç –ø—É–ª–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º, –≥–æ–¥–æ–≤—ã—Ö: '
            f'{code(pretty_money(new.liquidity_apy, postfix="%"))}{liquidity_apy_change}.\n'
        )

        # ---------------- USER STATS -----------------

        if new.users_daily or new.users_monthly:
            daily_users_change = bracketify(up_down_arrow(old.users_daily, new.users_daily, int_delta=True))
            monthly_users_change = bracketify(up_down_arrow(old.users_monthly, new.users_monthly, int_delta=True))
            message += f'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å: {code(new.users_daily)}{daily_users_change}, ' \
                       f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {code(new.users_monthly)}{monthly_users_change} üÜï\n'
            message += '\n'

        # ---------------- POOLS -----------------

        active_pool_changes = bracketify(up_down_arrow(old.active_pool_count,
                                                       new.active_pool_count, int_delta=True))
        pending_pool_changes = bracketify(up_down_arrow(old.pending_pool_count,
                                                        new.pending_pool_count, int_delta=True))
        message += f'{bold(new.active_pool_count)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–ª–æ–≤{active_pool_changes}.\n'
        message += f'{bold(new.pending_pool_count)} –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—É–ª–æ–≤{pending_pool_changes}.\n'

        if new.next_pool_to_activate:
            next_pool_wait = self.seconds_human(new.next_pool_activation_ts - now_ts())
            next_pool = self.pool_link(new.next_pool_to_activate)
            message += f"–í–µ—Ä–æ—è—Ç–Ω–æ, –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—É–ª: {next_pool} —á–µ—Ä–µ–∑ {next_pool_wait}."
        else:
            message += f"–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ –ø—É–ª–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."

        return message

    # Translate to Russian
    TEXT_PIC_STATS_NATIVE_ASSET_VAULTS = "–ù–∞—Ç–∏–≤–Ω—ã–µ –ê–∫—Ç–∏–≤—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö"
    TEXT_PIC_STATS_WEEKLY_REVENUE = "–ù–µ–¥–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"
    TEXT_PIC_STATS_SWAP_INFO = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–ø–∞—Ö –∑–∞ –Ω–µ–¥–µ–ª—é"

    TEXT_PIC_STATS_NATIVE_ASSET_POOLED = '–í—Å–µ–≥–æ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤'
    TEXT_PIC_STATS_NETWORK_SECURITY = '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏'
    TEXT_PIC_STATS_PROTOCOL_REVENUE = '–î–æ—Ö–æ–¥ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞'
    TEXT_PIC_STATS_AFFILIATE_REVENUE = '–î–æ—Ö–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤'
    TEXT_PIC_STATS_TOP_AFFILIATE = '–¢–æ–ø 3 –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –¥–æ—Ö–æ–¥—É'
    TEXT_PIC_STATS_UNIQUE_SWAPPERS = '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤'
    TEXT_PIC_STATS_NUMBER_OF_SWAPS = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–æ–≤'
    TEXT_PIC_STATS_USD_VOLUME = '–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤'
    TEXT_PIC_STATS_TOP_SWAP_ROUTES = '–¢–æ–ø 3 –ø—É—Ç–∏ –æ–±–º–µ–Ω–∞'
    TEXT_PIC_STATS_ORGANIC_VS_BLOCK_REWARDS = '–ö–æ–º–∏—Å—Å–∏–∏ / –Ω–∞–≥—Ä–∞–¥—ã –±–ª–æ–∫–∞'

    TEXT_PIC_STATS_SYNTH = '—Å–∏–Ω—Ç—ã'
    TEXT_PIC_STATS_TRADE = '—Ç–æ—Ä–≥.'
    TEXT_PIC_STATS_NORMAL = '–æ–±—ã—á–Ω—ã–µ'

    @staticmethod
    def text_key_stats_period(start_date: datetime, end_date: datetime):
        date_format = '%d %B %Y'

        month_names = {
            "January": "–Ø–Ω–≤–∞—Ä—è",
            "February": "–§–µ–≤—Ä–∞–ª—è",
            "March": "–ú–∞—Ä—Ç–∞",
            "April": "–ê–ø—Ä–µ–ª—è",
            "May": "–ú–∞—è",
            "June": "–ò—é–Ω—è",
            "July": "–ò—é–ª—è",
            "August": "–ê–≤–≥—É—Å—Ç–∞",
            "September": "–°–µ–Ω—Ç—è–±—Ä—è",
            "October": "–û–∫—Ç—è–±—Ä—è",
            "November": "–ù–æ—è–±—Ä—è",
            "December": "–î–µ–∫–∞–±—Ä—è"
        }

        return translate(f'{start_date.strftime(date_format)} ‚Äì {end_date.strftime(date_format)}', month_names)

    def notification_text_key_metrics_caption(self, data: AlertKeyStats):
        return 'THORChain –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'

    TEXT_WEEKLY_STATS_NO_DATA = 'üò© –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.'

    # ------ TRADE ACCOUNT ------

    def notification_text_trade_account_move(self, event: AlertTradeAccountAction, name_map: NameMap):
        action_str = '–î–µ–ø–æ–∑–∏—Ç –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç' if event.is_deposit else '–í—ã–≤–æ–¥ —Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞'
        from_link, to_link, amt_str = self._trade_acc_from_to_links(event, name_map)
        arrow = '‚û°' if event.is_deposit else '‚¨Ö'
        return (
            f"{arrow}üè¶ <b>{action_str}</b> {self.link_to_tx(event.tx_hash)}\n"
            f"üë§ –û—Ç {from_link}"
            f" –Ω–∞ {to_link}\n"
            f"–í—Å–µ–≥–æ: {amt_str}"
        )

    def notification_text_trade_account_summary(self, e: AlertTradeAccountStats):
        top_n = 5
        top_vaults_str = self._top_trade_vaults(e, top_n)

        delta_holders = bracketify(
            up_down_arrow(e.prev.vaults.total_traders, e.curr.vaults.total_traders, int_delta=True)) if e.prev else ''

        delta_balance = bracketify(
            up_down_arrow(e.prev.vaults.total_usd, e.curr.vaults.total_usd, percent_delta=True)) if e.prev else ''

        tr_swap_volume_curr, tr_swap_volume_prev = e.curr_and_prev_trade_volume_usd
        delta_volume = bracketify(
            up_down_arrow(tr_swap_volume_prev, tr_swap_volume_curr, percent_delta=True)) if e.prev else ''

        return (
            f"‚öñÔ∏è <b>–°–≤–æ–¥–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å—á–µ—Ç–∞–º –∑–∞ —Å—É—Ç–∫–∏</b>\n"
            f"–í—Å–µ–≥–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: {bold(pretty_money(e.curr.vaults.total_traders))}"
            f" {delta_holders}\n"
            f"–í—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤: {bold(short_money(e.curr.vaults.total_usd))}"
            f" {delta_balance}\n"
            f"–î–µ–ø–æ–∑–∏—Ç—ã: {bold(short_money(e.curr.trade_deposit_count, integer=True))}"
            f" {bracketify(short_dollar(e.curr.trade_deposit_vol_usd))}\n"
            f"–í—ã–≤–æ–¥—ã: {bold(short_money(e.curr.trade_withdrawal_count, integer=True))}"
            f" {bracketify(short_dollar(e.curr.trade_withdrawal_vol_usd))}\n"
            f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {bold(short_dollar(tr_swap_volume_curr))} {delta_volume}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–æ–≤: {bold(short_money(e.curr.trade_swap_count, integer=True))}"
            f" {bracketify(up_down_arrow(e.prev.trade_swap_count, e.curr.trade_swap_count, int_delta=True))}\n"
            f"\n"
            f"–ù–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ:\n"
            f"{top_vaults_str}"
        )

    # ------- NETWORK NODES -------

    TEXT_PIC_NODES = '–Ω–æ–¥—ã'
    TEXT_PIC_ACTIVE_NODES = '–ê–∫—Ç–∏–≤–Ω—ã–µ'
    TEXT_PIC_STANDBY_NODES = '–û–∂–∏–¥–∞—é—â–∏–µ'
    TEXT_PIC_ALL_NODES = '–í—Å–µ –Ω–æ–¥—ã'
    TEXT_PIC_NODE_DIVERSITY = '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–¥'
    TEXT_PIC_NODE_DIVERSITY_SUBTITLE = '–ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã'
    TEXT_PIC_OTHERS = '–î—Ä—É–≥–∏–µ'
    TEXT_PIC_UNKNOWN = '–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ'

    TEXT_PIC_UNKNOWN_LOCATION = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ'
    TEXT_PIC_CLOUD = '–û–±–ª–∞–∫–æ'
    TEXT_PIC_COUNTRY = '–°—Ç—Ä–∞–Ω–∞'
    TEXT_PIC_ACTIVE_BOND = '–ê–∫—Ç–∏–≤–Ω—ã–π –±–æ–Ω–¥'
    TEXT_PIC_TOTAL_NODES = '–í—Å–µ–≥–æ –Ω–æ–¥'
    TEXT_PIC_TOTAL_BOND = '–û–±—â–∏–π –±–æ–Ω–¥'
    TEXT_PIC_MIN_BOND = '–ú–∏–Ω. –±–æ–Ω–¥'
    TEXT_PIC_MEDIAN_BOND = '–ú–µ–¥–∏–∞–Ω–∞'
    TEXT_PIC_MAX_BOND = '–ú–∞–∫—Å'

    def _format_node_text(self, node: NodeInfo, add_status=False, extended_info=False, expand_link=False):
        if expand_link:
            node_ip_link = link(get_ip_info_link(node.ip_address), node.ip_address) if node.ip_address else 'No IP'
        else:
            node_ip_link = node.ip_address or 'no IP'

        thor_explore_url = get_explorer_url_to_address(self.cfg.network_id, Chains.THOR, node.node_address)
        node_thor_link = link(thor_explore_url, short_address(node.node_address, 0))

        node_status = node.status.lower()
        if node_status == node.STANDBY:
            status = '–û–∂–∏–¥–∞–Ω–∏–µ'
        elif node_status == node.ACTIVE:
            status = '–ê–∫—Ç–∏–≤–Ω–∞'
        elif node_status == node.DISABLED:
            status = '–û—Ç–∫–ª—é—á–µ–Ω–∞!'
        else:
            status = node.status

        extra = ''
        if extended_info:
            if node.slash_points:
                extra += f", {bold(node.slash_points)} —à—Ç—Ä–∞—Ñ–æ–≤"
            if node.current_award:
                award_text = bold(pretty_money(node.current_award, postfix=RAIDO_GLYPH))
                extra += f", {award_text} –Ω–∞–≥—Ä–∞–¥—ã"

        status = f', ({status})' if add_status else ''
        version_str = f", v. {node.version}" if extended_info else ''
        return f'{bold(node_thor_link)} ({node.flag_emoji}{node_ip_link}{version_str}) ' \
               f'—Å {bold(pretty_money(node.bond, postfix=RAIDO_GLYPH))} –±–æ–Ω–¥ {status}{extra}'.strip()

    def _node_bond_change_after_churn(self, changes: NodeSetChanges):
        bond_in, bond_out = changes.bond_churn_in, changes.bond_churn_out
        bond_delta = bond_in - bond_out
        return f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ–Ω–¥–∞: {code(short_money(bond_delta, postfix=RAIDO_GLYPH, signed=True))}'

    def notification_text_node_churn_finish(self, changes: NodeSetChanges):
        message = ''

        if changes.nodes_activated or changes.nodes_deactivated:
            message += bold('‚ôªÔ∏è –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –Ω–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ') + '\n\n'

        message += self._make_node_list(changes.nodes_added, 'üÜï –ù–æ–≤—ã–µ –Ω–æ–¥—ã –ø–æ—è–≤–∏–ª–∏—Å—å:', add_status=True)
        message += self._make_node_list(changes.nodes_activated, '‚û°Ô∏è –ù–æ–¥—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:')
        message += self._make_node_list(changes.nodes_deactivated, '‚¨ÖÔ∏èÔ∏è –ù–æ–¥—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:')
        message += self._make_node_list(changes.nodes_removed, 'üóëÔ∏è –ù–æ–¥—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –∏–ª–∏ –∏—Å—á–µ–∑–ª–∏:', add_status=True)

        if changes.nodes_activated or changes.nodes_deactivated:
            message += self._node_bond_change_after_churn(changes)

        if changes.churn_duration:
            message += f'\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {seconds_human(changes.churn_duration)}'

        return message.strip()

    def notification_churn_started(self, changes: NodeSetChanges):
        text = f'‚ôªÔ∏è <b>–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –Ω–æ–¥ –Ω–∞—á–∞–ª—Å—è –Ω–∞ –±–ª–æ–∫–µ #{changes.block_no}</b>'
        if changes.vault_migrating:
            text += '\n–•—Ä–∞–Ω–∏–ª–∏—â–∞ –º–∏–≥—Ä–∏—Ä—É—é—Ç.'
        return text

    def node_list_text(self, nodes: List[NodeInfo], status, items_per_chunk=12):
        add_status = False
        if status == NodeInfo.ACTIVE:
            title = '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã:'
            nodes = [n for n in nodes if n.is_active]
        elif status == NodeInfo.STANDBY:
            title = '‚è± –û–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–¥—ã:'
            nodes = [n for n in nodes if n.is_standby]
        else:
            title = '‚ùî –ù–æ–¥—ã –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö:'
            nodes = [n for n in nodes if n.in_strange_status]
            add_status = True

        groups = list(grouper(items_per_chunk, nodes))

        starts = []
        current_start = 1
        for group in groups:
            starts.append(current_start)
            current_start += len(group)

        return [
            self._make_node_list(group,
                                 title if start == 1 else '',
                                 extended_info=True,
                                 add_status=add_status,
                                 start=start).rstrip()
            for start, group in zip(starts, groups)
        ]

    # ------ VERSION ------

    @staticmethod
    def node_version(v, data: NodeSetChanges, active=True):
        realm = data.active_only_nodes if active else data.nodes_all
        n_nodes = len(data.find_nodes_with_version(realm, v))
        return f"{code(v)} ({n_nodes} {plural(n_nodes, 'node', 'nodes')})"

    def notification_text_version_upgrade_progress(self,
                                                   data: NodeSetChanges,
                                                   ver_con: NodeVersionConsensus):
        msg = bold('üïñ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ THORChain\n\n')

        progress = ver_con.ratio * 100.0
        pb = progressbar(progress, 100.0, 14)

        msg += f'{pb} {progress:.0f} %\n'
        msg += f"{pre(ver_con.top_version_count)} –∏–∑ {pre(ver_con.total_active_node_count)} –Ω–æ–¥ " \
               f"–æ–±–Ω–æ–≤–∏–ª–∏—Å—å –¥–æ –≤–µ—Ä—Å–∏–∏ {pre(ver_con.top_version)}\n\n"

        cur_version_txt = self.node_version(data.current_active_version, data, active=True)
        msg += f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–µ–π—á–∞—Å ‚Äì {cur_version_txt}\n" + \
               ital('* –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥.') + '\n\n'

        return msg

    def notification_text_version_upgrade(self,
                                          data: NodeSetChanges,
                                          new_versions: List[VersionInfo],
                                          old_active_ver: VersionInfo,
                                          new_active_ver: VersionInfo):

        msg = bold('üí´ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ THORChain') + '\n\n'

        def version_and_nodes(v, all=False):
            realm = data.nodes_all if all else data.active_only_nodes
            n_nodes = len(data.find_nodes_with_version(realm, v))
            return f"{code(v)} ({n_nodes} {plural(n_nodes, '–Ω–æ–¥–∞', '–Ω–æ–¥')})"

        current_active_version = data.current_active_version

        if new_versions:
            new_version_joined = ', '.join(version_and_nodes(v, all=True) for v in new_versions)
            msg += f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version_joined}\n\n"

            msg += f"‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–µ–π—á–∞—Å ‚Äì {version_and_nodes(current_active_version)}\n" + \
                   ital('* –≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥.') + '\n\n'

        if old_active_ver != new_active_ver:
            action = '—É–ª—É—á—à–∏–ª–∞—Å—å' if new_active_ver > old_active_ver else '–æ—Ç–∫–∞—Ç–∏–ª–∞—Å—å'
            emoji = 'üÜô' if new_active_ver > old_active_ver else '‚¨áÔ∏è'
            msg += (
                f"{emoji} {bold('–í–Ω–∏–º–∞–Ω–∏–µ!')} –ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {bold(action)} "
                f"—Å –≤–µ—Ä—Å–∏–∏ {pre(old_active_ver)} "
                f"–¥–æ –≤–µ—Ä—Å–∏–∏ {version_and_nodes(new_active_ver)}\n\n"
            )

            cnt = data.version_counter(data.active_only_nodes)
            if len(cnt) == 1:
                msg += f"–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–æ–¥—ã –∏–º–µ—é—Ç –≤–µ—Ä—Å–∏—é {code(current_active_version)}\n"
            elif len(cnt) > 1:
                msg += bold(f"–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –Ω–æ–¥:") + '\n'
                for i, (v, count) in enumerate(cnt.most_common(5), start=1):
                    active_node = ' üëà' if v == current_active_version else ''
                    msg += f"{i}. {version_and_nodes(v)} {active_node}\n"
                msg += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äì {version_and_nodes(data.max_available_version)}\n"

        return msg

    # --------- CHAIN INFO SUMMARY ------------

    def text_chain_info(self, chain_infos: List[ThorChainInfo]):
        text = '‚õìÔ∏è ' + bold('THORChain –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–ª–æ–∫—á–µ–π–Ω–∞–º:') + '\n\n'
        for c in chain_infos:
            address_link = link(get_explorer_url_to_address(self.cfg.network_id, c.chain, c.address), '–°–ö–ê–ù')
            status = 'üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if c.halted else 'üÜó –ê–∫—Ç–∏–≤–µ–Ω'
            text += f'{bold(c.chain)}:\n' \
                    f'–°—Ç–∞—Ç—É—Å: {status}\n' \
                    f'–í—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å: {pre(c.address)} | {address_link}\n'

            if c.router:
                router_link = link(get_explorer_url_to_address(self.cfg.network_id, c.chain, c.router), '–°–ö–ê–ù')
                text += f'–†–æ—É—Ç–µ—Ä: {pre(c.router)} | {router_link}\n'

            text += f'–¶–µ–Ω–∞ –≥–∞–∑–∞: {pre(c.gas_rate)}\n\n'

        if not chain_infos:
            text += '–ò–Ω—Ñ–æ –æ –±–ª–æ–∫—á–µ–π–Ω–∞—Ö –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ...'

        return text.strip()

    # --------- MIMIR INFO ------------

    MIMIR_STANDARD_VALUE = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç:"
    MIMIR_OUTRO = f'\n\nüîπ ‚Äì {ital("–ê–¥–º–∏–Ω –ú–∏–º–∏—Ä")}\n' \
                  f'üî∏ ‚Äì {ital("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–æ–¥")}\n' \
                  f'‚ñ™Ô∏è ‚Äì {ital("–ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞")}'
    MIMIR_NO_DATA = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
    MIMIR_BLOCKS = '–±–ª–æ–∫–æ–≤'
    MIMIR_DISABLED = '–í–´–ö–õ–Æ–ß–ï–ù–û'
    MIMIR_YES = '–î–ê'
    MIMIR_NO = '–ù–ï–¢'
    MIMIR_UNDEFINED = '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
    MIMIR_LAST_CHANGE = '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ'
    MIMIR_UNKNOWN_CHAIN = '–ù–µ–∏–∑–≤. —Å–µ—Ç—å'

    def text_mimir_intro(self):
        text = f'üéÖ {bold("–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ú–∏–º–∏—Ä")}\n'
        cheatsheet_link = link(self.MIMIR_CHEAT_SHEET_URL, '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç')
        what_is_mimir_link = link(self.MIMIR_DOC_LINK, "–ß—Ç–æ —Ç–∞–∫–æ–µ –ú–∏–º–∏—Ä?")
        text += f"{what_is_mimir_link} –ê –µ—â–µ {cheatsheet_link}.\n\n"
        return text

    TEXT_NODE_MIMIR_VOTING_TITLE = 'üèõÔ∏è <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–æ–¥ –∑–∞ –ú–∏–º–∏—Ä</b>\n\n'
    TEXT_NODE_MIMIR_VOTING_NOTHING_YET = '–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.'
    TEXT_NODE_MIMIR_ALREADY_CONSENSUS = '‚úÖ —É–∂–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å'

    def _text_votes_to_pass(self, option):
        show = 0 < option.need_votes_to_pass <= self.NEED_VOTES_TO_PASS_MAX
        return f' {option.need_votes_to_pass} –µ—â–µ –≥–æ–ª–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ—à–ª–æ' if show else ''

    TEXT_MIMIR_VOTING_PROGRESS_TITLE = 'üèõ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–æ–¥ –∑–∞ –ú–∏–º–∏—Ä</b>\n\n'
    TEXT_MIMIR_VOTING_TO_SET_IT = '—á—Ç–æ–±—ã —Å—Ç–∞–ª–æ'

    # --------- TRADING HALTED -----------

    def notification_text_trading_halted_multi(self, chain_infos: List[ThorChainInfo]):
        msg = ''

        halted_chains = ', '.join(c.chain for c in chain_infos if c.halted)
        if halted_chains:
            msg += f'üö®üö®üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {code(halted_chains)}! ' \
                   f'–í–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –æ–±–º–µ–Ω–æ–≤, –ø–æ–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞! üö®üö®üö®\n\n'

        resumed_chains = ', '.join(c.chain for c in chain_infos if not c.halted)
        if resumed_chains:
            msg += f'‚úÖ <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –¢–æ—Ä–≥–æ–≤–ª—è —Å–Ω–æ–≤–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–∞—Ö: {code(resumed_chains)}!'

        return msg.strip()

    # ---------- BLOCK HEIGHT -----------

    TEXT_BLOCK_HEIGHT_CHART_TITLE = 'THORChain –±–ª–æ–∫–æ–≤ –≤ –º–∏–Ω—É—Ç'
    TEXT_BLOCK_HEIGHT_LEGEND_ACTUAL = '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É'
    TEXT_BLOCK_HEIGHT_LEGEND_EXPECTED = '–û–∂–∏–¥–∞–µ–º–∞—è (10 –±–ª/–º–∏–Ω –∏–ª–∏ 6 —Å–µ–∫ –Ω–∞ –±–ª–æ–∫)'

    def notification_text_block_stuck(self, e: EventBlockSpeed):
        good_time = e.time_without_blocks is not None and e.time_without_blocks > 1
        str_t = ital(self.seconds_human(e.time_without_blocks) if good_time else self.NA)
        if e.state == BlockProduceState.StateStuck:
            return f'üìõ {bold("THORChain –≤—ã—Å–æ—Ç–∞ –±–ª–æ–∫–æ–≤ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è")}!\n' \
                   f'–ù–æ–≤—ã–µ –±–ª–æ–∫–∏ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —É–∂–µ {str_t}.'
        else:
            return f"üÜó {bold('THORChain —Å–Ω–æ–≤–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏!')}\n" \
                   f"–°–±–æ–π –¥–ª–∏–ª—Å—è {str_t}"

    @staticmethod
    def get_block_time_state_string(state, state_changed):
        if state == BlockProduceState.NormalPace:
            if state_changed:
                return 'üëå –°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π.'
            else:
                return 'üëå –°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –≤ –Ω–æ—Ä–º–µ.'
        elif state == BlockProduceState.TooSlow:
            return 'üêå –ë–ª–æ–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ.'
        elif state == BlockProduceState.TooFast:
            return 'üèÉ –ë–ª–æ–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.'
        else:
            return ''

    def notification_text_block_pace(self, e: EventBlockSpeed):
        phrase = self.get_block_time_state_string(e.state, True)
        block_per_minute = self.format_bps(e.block_speed)

        return (
            f'<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤ THORChain</b>\n'
            f'{phrase}\n'
            f'–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç <code>{block_per_minute}</code> –±–ª–æ–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É, –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ '
            f'–Ω—É–∂–Ω–æ <code>{self.format_block_time(e.block_speed)} —Å–µ–∫</code> –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞.'
        )

    def text_block_time_report(self, last_block, last_block_ts, recent_bps, state):
        phrase = self.get_block_time_state_string(state, False)
        block_per_minute = self.format_bps(recent_bps)
        ago = self.format_time_ago(last_block_ts)
        block_str = f"#{last_block}"
        return (
            f'<b>THORChain —Ç–µ–º–ø—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤.</b>\n'
            f'{phrase}\n'
            f'–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è <code>{block_per_minute}</code> –±–ª–æ–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É, –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏'
            f'–Ω—É–∂–Ω–æ <code>{self.format_block_time(block_per_minute)} —Å–µ–∫</code> –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞.\n'
            f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ THORChain: {code(block_str)} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {ago}).'
        )

    # --------- MIMIR CHANGED -----------

    def notification_text_mimir_changed(self, changes: List[MimirChange], mimir: MimirHolder):
        if not changes:
            return ''

        text = 'üîî <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ú–∏–º–∏—Ä!</b>\n\n'

        for change in changes:
            old_value_fmt = code(self.format_mimir_value(change.entry.name, change.old_value, change.entry.units))
            new_value_fmt = code(self.format_mimir_value(change.entry.name, change.new_value, change.entry.units))
            name = code(change.entry.pretty_name if change.entry else change.name)

            e = change.entry
            if e:
                if e.source == e.SOURCE_AUTO:
                    text += bold('[ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ ]  ')
                elif e.source == e.SOURCE_ADMIN:
                    text += bold('[üë©‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ]  ')
                elif e.source == e.SOURCE_NODE:
                    text += bold('[ü§ù –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–æ–¥ ]  ')
                elif e.source == e.SOURCE_NODE_CEASED:
                    text += bold('[üíî –ú–∏–º–∏—Ä –Ω–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω ]  ')

            if change.kind == MimirChange.ADDED_MIMIR:
                text += (
                    f'‚ûï –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "{name}" —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–æ–≤—ã–º –ú–∏–º–∏—Ä–æ–º. '
                    f'–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—ã–ª–æ: {old_value_fmt} ‚Üí '
                    f'–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–ª–æ: {new_value_fmt}‚ÄºÔ∏è'
                )
            elif change.kind == MimirChange.REMOVED_MIMIR:
                text += f'‚ûñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–∏–º–∏—Ä–∞ "{name}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞! –†–∞–Ω–µ–µ –æ–Ω–∞ –∏–º–µ–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value_fmt}.'
                if change.new_value is not None:
                    text += f' –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ: {new_value_fmt}‚ÄºÔ∏è'
            else:
                text += (
                    f'üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ú–∏–º–∏—Ä–∞ "{name}" –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. '
                    f'–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value_fmt} ‚Üí '
                    f'–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å: {new_value_fmt}‚ÄºÔ∏è'
                )
                if change.entry.automatic and change.non_zero_value:
                    text += f' (–Ω–∞ –±–ª–æ–∫–µ #{ital(change.non_zero_value)}).'
            text += '\n\n'

        text += link("https://docs.thorchain.org/how-it-works/governance#mimir", "–ß—Ç–æ —Ç–∞–∫–æ–µ Mimir?")

        return text

    # ------- NODE OP TOOLS -------

    BUTTON_NOP_ADD_NODES = '‚ûï –î–æ–±–∞–≤—å –Ω–æ–¥—ã'
    BUTTON_NOP_MANAGE_NODES = 'üñäÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
    BUTTON_NOP_SETTINGS = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
    BUTTON_NOP_GET_SETTINGS_LINK = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ New!'

    def pretty_node_desc(self, node: NodeInfo, name=None):
        addr = self.short_node_name(node.node_address, name)
        return f'{pre(addr)} ({bold(short_money(node.bond, prefix="R"))} –±–æ–Ω–¥)'

    TEXT_NOP_INTRO_HEADING = bold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–Ω—Å—Ç—Ä–µ–º–µ–Ω—Ç—ã –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ù–æ–¥.')

    def text_node_op_welcome_text_part2(self, watch_list: list, last_signal_ago: float):
        text = '–ú—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ' \
               '–∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ —Å–ª—É—á–∞–µ—Ç—Å—è —Å –Ω–æ–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ.\n\n'
        if watch_list:
            text += f'–£ –≤–∞—Å {len(watch_list)} –Ω–æ–¥ –≤ —Å–ø–∏—Å–∫–µ —Å–ª–µ–∂–µ–Ω–∏—è.'
        else:
            text += f'–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –µ—â–µ –ø–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–π –Ω–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–µ–∂–µ–Ω–∏—è. ' \
                    f'–ù–∞–∂–º–∏—Ç–µ "{ital(self.BUTTON_NOP_ADD_NODES)}" —Å–ø–µ—Ä–≤–∞ üëá.'

        text += f'\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –±—ã–ª: {ital(self.format_time_ago(last_signal_ago))}'
        if last_signal_ago > 60:
            text += 'üî¥'
        elif last_signal_ago > 20:
            text += 'üü†'
        else:
            text += 'üü¢'

        return text

    TEXT_NOP_MANAGE_LIST_TITLE = \
        '–í—ã –¥–æ–±–∞–≤–∏–ª–∏ <b>{n}</b> –Ω–æ–¥ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Å–ª–µ–∂–µ–Ω–∏—è. ' \
        '–í—ã –º–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å –Ω–æ–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–∂–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–ø–æ–Ω–∫–∏ —Å–Ω–∏–∑—É.'

    TEXT_NOP_ADD_INSTRUCTIONS = 'ü§ì –ï—Å–ª–∏ –≤–∞–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã –∞–¥—Ä–µ—Å–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –Ω–æ–¥, ' \
                                f'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏—Ö —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ. ' \
                                f'–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å {pre("thorAbc5andD1so2on")} –∏–ª–∏ ' \
                                f'–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∏–ª–∏ –±–æ–ª–µ–µ —Å–∏–º–≤–æ–ª–æ–≤. ' \
                                f'–ò–º–µ–Ω–∞ –Ω–æ–¥ –≤ —Å–ø–∏—Å–∫–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–∞–º–∏, –∑–∞–ø—è—Ç—ã–º–∏ –∏–ª–∏ —ç–Ω—Ç–µ—Ä–∞–º–∏.\n\n' \
                                f'–ü—Ä–∏–º–µ—Ä: {pre("66ew, xqmm, 7nv9")}'
    BUTTON_NOP_ADD_ALL_NODES = '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –Ω–æ–¥—ã'
    BUTTON_NOP_ADD_ALL_ACTIVE_NODES = '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ'

    TEXT_NOP_SEARCH_NO_VARIANTS = '–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å ' \
                                  '–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø–∏—Å–∫–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω—ã—Ö –Ω–æ–¥.'
    TEXT_NOP_SEARCH_VARIANTS = '–ú—ã –Ω–∞—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–¥—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:'

    TEXT_NOP_SETTINGS_TITLE = '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–¥–µ—Å—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:'

    def text_nop_get_weblink_title(self, link):
        return f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ç–æ–≤–∞: {link}!\n' \
               f'–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.'

    BUTTON_NOP_SETT_OPEN_WEB_LINK = 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ'
    BUTTON_NOP_SETT_REVOKE_WEB_LINK = 'ü§ú –û—Ç–æ–∑–≤–∞—Ç—å —Å—Å—ã–ª–∫—É'

    TEXT_NOP_REVOKED_URL_SUCCESS = '–°—Å—ã–ª–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Ç–æ–∫–µ–Ω –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã!'

    BUTTON_NOP_SETT_SLASHING = '–®—Ç—Ä–∞—Ñ—ã'
    BUTTON_NOP_SETT_VERSION = '–í–µ—Ä—Å–∏–∏'
    BUTTON_NOP_SETT_OFFLINE = '–û—Ñ—Ñ–ª–∞–π–Ω'
    BUTTON_NOP_SETT_CHURNING = '–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ'
    BUTTON_NOP_SETT_BOND = '–ë–æ–Ω–¥'
    BUTTON_NOP_SETT_HEIGHT = '–í—ã—Å–æ—Ç–∞ –±–ª–æ–∫–æ–≤'
    BUTTON_NOP_SETT_IP_ADDR = 'IP –∞–¥—Ä.'
    BUTTON_NOP_SETT_PAUSE_ALL = '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'

    @staticmethod
    def text_enabled_disabled(is_on):
        return '–≤–∫–ª—é—á–µ–Ω—ã' if is_on else '–≤—ã–∫–ª—é—á–µ–Ω—ã'

    def text_nop_slash_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –æ—á–∫–æ–≤ –Ω–æ–¥–∞–º {bold(en_text)}.'

    def text_nop_bond_is_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–æ–Ω–¥–∞ {bold(en_text)}.'

    def text_nop_new_version_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ {bold(en_text)}.\n\n' \
               f'<i>–ù–∞ —Å–ª–µ–¥—É—é—â–∏–µ–º —à–∞–≥–µ –≤—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –Ω–æ–¥.</i>'

    def text_nop_version_up_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –Ω–æ–¥—ã {bold(en_text)}.'

    def text_nop_offline_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ö–æ–¥–µ –Ω–æ–¥—ã –≤ –æ—Ñ—Ñ–ª–∞–π–Ω –∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –æ–Ω–ª–∞–π–Ω {bold(en_text)}.\n\n' \
               f'<i>–ù–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö –≤—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã.</i>'

    def text_nop_churning_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ –Ω–æ–¥ {bold(en_text)}.\n\n' \
               f'<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, ' \
               f'–µ—Å–ª–∏ –≤–∞—à–∞ –Ω–æ–¥–∞ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–æ–¥ –∏–ª–∏ –ø–æ–∫–∏–¥–∞–µ—Ç –µ–≥–æ.</i>'

    def text_nop_ip_address_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —Å–º–µ–Ω–µ IP –∞–¥—Ä–µ—Å–∞ {bold(en_text)}.\n\n' \
               f'<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–æ–¥–∞ –≤–¥—Ä—É–≥ –∏–∑–º–µ–Ω–∏—Ç —Å–≤–æ–π IP –∞–¥—Ä–µ—Å.</i>'

    def text_nop_ask_offline_period(self, current):
        return f'–ö–∞–∫–æ–π –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?\n\n' \
               f'–ï—Å–ª–∏ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ –≤–∞—à–µ–π –Ω–æ–¥—ã –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, ' \
               f'—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n' \
               f'–°–µ–π—á–∞—Å: {pre(self.seconds_human(current))}.'

    def text_nop_chain_height_enabled(self, is_on):
        en_text = self.text_enabled_disabled(is_on)
        return f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–∏—Å—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö –±–ª–æ–∫—á–µ–π–Ω–æ–≤ {bold(en_text)}.\n\n' \
               f'<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∞—à–∏ –±–ª–æ–∫—á–µ–π–Ω –∫–ª–∏–µ–Ω—Ç—ã –Ω–∞ –Ω–æ–¥–∞—Ö –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏.</i>'

    BUTTON_NOP_LEAVE_ON = '‚úî –í–∫–ª.'
    BUTTON_NOP_LEAVE_OFF = '‚úî –í—ã–∫–ª.'
    BUTTON_NOP_TURN_ON = '–í–∫–ª.'
    BUTTON_NOP_TURN_OFF = '–í—ã–∫–ª.'

    BUTTON_NOP_INTERVALS = {
        '2m': '2 –º–∏–Ω',
        '5m': '5 –º–∏–Ω',
        '15m': '15 –º–∏–Ω',
        '30m': '30 –º–∏–Ω',
        '60m': '1 —á–∞—Å',
        '2h': '2 —á–∞—Å–∞',
        '6h': '6 —á.',
        '12h': '12 —á.',
        '24h': '1 –¥–µ–Ω—å',
        '3d': '3 –¥–Ω—è',
    }

    TEXT_NOP_SLASH_THRESHOLD = '–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Ä–æ–≥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ ' \
                               '—à—Ç—Ä–∞—Ñ–Ω—ã—Ö –æ—á–∫–∞—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤ —Ä–∞–π–æ–Ω–µ 5 - 10):'

    def text_nop_ask_slash_period(self, pts):
        return f'–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n' \
               f'–ö –ø—Ä–∏–º–µ—Ä—É, –µ—Å–ª–∏ –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <i>10 –º–∏–Ω—É—Ç</i> –∏ –ø–æ—Ä–æ–≥ <i>{pts} –æ—á–∫–æ–≤</i>, —Ç–æ ' \
               f'–≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∞—à–∞ –Ω–æ–¥–∞ –Ω–∞–±–µ—Ä–µ—Ç ' \
               f'<i>{pts} –æ—á–∫–æ–≤ —à—Ç—Ä–∞—Ñ–∞</i> –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ <i>10 –º–∏–Ω—É—Ç</i>.'

    def text_nop_ask_chain_height_lag_time(self, current_lag_time):
        return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. ' \
               '–ï—Å–ª–∏ –≤–∞—à–∞ –Ω–æ–¥–∞ –Ω–µ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ –±–æ–ª–µ–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.\n\n' \
               '–ï—Å–ª–∏ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ —Ç–∏–ø–∏—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∞ –¥–ª—è –∫–∞–∫–æ–π-–ª–∏–±–æ —Ü–µ–ø–æ—á–∫–∏ –±–ª–æ–∫–æ–≤, ' \
               '—Ç–æ –æ–Ω–æ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 150% –æ—Ç —Ç–∏–ø–∏—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (15 –º–∏–Ω—É—Ç –¥–ª—è BTC).'

    def text_nop_success_add_banner(self, node_addresses):
        node_addresses_text = ','.join([self.short_node_name(a) for a in node_addresses])
        node_addresses_text = shorten_text(node_addresses_text, 80)
        message = f'üòâ –£—Å–ø–µ—Ö! {node_addresses_text} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫. ' \
                  f'–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ!'
        return message

    BUTTON_NOP_CLEAR_LIST = 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ ({n})'
    BUTTON_NOP_REMOVE_INACTIVE = '‚ùå –£–±—Ä–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ ({n})'
    BUTTON_NOP_REMOVE_DISCONNECTED = '‚ùå –£–±—Ä–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ ({n})'

    def text_nop_success_remove_banner(self, node_addresses):
        node_addresses_text = ','.join([self.short_node_name(a) for a in node_addresses])
        node_addresses_text = shorten_text(node_addresses_text, 120)
        return f'üòâ –£—Å–ø–µ—Ö! –í—ã —É–±—Ä–∞–ª–∏ –Ω–æ–¥—ã –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–∂–µ–Ω–∏—è: ' \
               f'{node_addresses_text} ({len(node_addresses)} –≤—Å–µ–≥–æ).'

    def notification_text_for_node_op_changes(self, c: NodeEvent):
        message = ''
        short_addr = self.node_link(c.address)
        if c.type == NodeEventType.SLASHING:
            data: EventDataSlash = c.data
            date_str = self.seconds_human(data.interval_sec)
            message = f'üî™ –ù–æ–¥–∞ {short_addr} –ø–æ–ª—É—á–∏–ª–∞ —à—Ç—Ä–∞—Ñ ' \
                      f'–Ω–∞ {bold(data.delta_pts)} –æ—á–∫–æ–≤ ‚âà{date_str} ' \
                      f'(—Å–µ–π—á–∞—Å –≤ —Å—É–º–º–µ: <i>{data.current_pts}</i> —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –æ—á–∫–æ–≤)!'
        elif c.type == NodeEventType.VERSION_CHANGED:
            old, new = c.data
            message = f'üÜô –ù–æ–¥–∞ {short_addr} –æ–±–Ω–æ–≤–∏–ª–∞—Å—å —Å –≤–µ—Ä—Å–∏–∏ {ital(old)} –¥–æ {bold(new)}!'
        elif c.type == NodeEventType.NEW_VERSION_DETECTED:
            message = f'üÜï –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ü–û –Ω–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! {bold(c.data)}! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å—Å—è!'
        elif c.type == NodeEventType.BOND:
            old, new = c.data
            message = f'‚öñÔ∏è –ù–æ–¥–∞ {short_addr}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω–¥–∞ —Å ' \
                      f'{pretty_rune(old)} ' \
                      f'–¥–æ {bold(pretty_rune(new))}!'
        elif c.type == NodeEventType.IP_ADDRESS_CHANGED:
            old, new = c.data
            message = f'üè§ –ù–æ–¥–∞ {short_addr} —Å–º–µ–Ω–∏–ª–∞ —Å–≤–æ–π IP –∞–¥—Ä–µ—Å —Å {ital(old)} –Ω–∞ {bold(new)}!'
        elif c.type == NodeEventType.SERVICE_ONLINE:
            online, duration, service = c.data
            service = bold(str(service).upper())
            if online:
                message = f'‚úÖ –°–µ—Ä–≤–∏—Å {service} –Ω–æ–¥—ã {short_addr} –æ–ø—è—Ç—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ <b>–æ–Ω–ª–∞–π–Ω</b>!'
            else:
                message = f'üî¥ –°–µ—Ä–≤–∏—Å {service} –Ω–æ–¥—ã {short_addr} —É—à–µ–ª –≤ <b>–æ—Ñ—Ñ–ª–∞–π–Ω</b> ' \
                          f'(—É–∂–µ –∫–∞–∫ {self.seconds_human(duration)})!'
        elif c.type == NodeEventType.CHURNING:
            verb = '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å ‚¨ÖÔ∏è' if c.data else '–≤—ã—à–ª–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ ‚û°Ô∏è'
            bond = c.node.bond
            message = f'üåê –ù–æ–¥–∞ {short_addr} ({short_money(bond)} {RAIDO_GLYPH} –±–æ–Ω–¥–∞) {bold(verb)}!'
        elif c.type == NodeEventType.BLOCK_HEIGHT:
            data: EventBlockHeight = c.data

            if data.is_sync:
                message = f'‚úÖ –ù–æ–¥–∞ {short_addr} –¥–æ–≥–Ω–∞–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ {pre(data.chain)}.'
            else:
                message = f'üî¥ –ù–æ–¥–∞ {short_addr} –Ω–∞ {pre(data.block_lag)} –ø–æ–∑–∞–¥–∏ ' \
                          f'–Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ {pre(data.chain)} (‚âà{self.seconds_human(data.how_long_behind)})!'
        elif c.type == NodeEventType.PRESENCE:
            if c.data:
                message = f'üôã –ù–æ–¥–∞ {short_addr} —Å–Ω–æ–≤–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ —Å–µ—Ç—å THORChain!'
            else:
                message = f'‚ÅâÔ∏è –ù–æ–¥–∞ {short_addr} –∏—Å—á–µ–∑–ª–∞ –∏–∑ —Å–µ—Ç–∏ THORChain!'
        elif c.type == NodeEventType.TEXT_MESSAGE:
            text = str(c.data)[:self.NODE_OP_MAX_TEXT_MESSAGE_LENGTH]
            message = f'‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º: {code(text)}'
        elif c.type == NodeEventType.CABLE_DISCONNECT:
            message = f'üíîÔ∏è NodeOp –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã <b>–æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å</b> –æ—Ç —Å–µ—Ç–∏ THORChain.\n' \
                      f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç—Å—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–¥, ' \
                      f'–ø–æ–∫–∞ –º—ã –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–º –ø—Ä–æ–±–ª–µ–º—É.'
        elif c.type == NodeEventType.CABLE_RECONNECT:
            message = f'üíö NodeOp –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ THORChain.'

        return message

    # ------- BEST POOLS -------

    TEXT_BP_HEADER = '–õ–£–ß–®–ò–ï –ü–£–õ–´'

    TEXT_BP_BEST_APR_TITLE = '–ü–†–ò–†–û–°–¢'
    TEXT_BP_HIGH_VOLUME_TITLE = '–û–ë–™–ï–ú–´'
    TEXT_BP_DEEPEST_TITLE = '–ì–õ–£–ë–ò–ù–ê'

    TEXT_BP_ACTIVE_POOLS = '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É–ª—ã'
    TEXT_BP_TOTAL_LIQ = '–û–±—â–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'
    TEXT_BP_24H_VOLUME = '–û–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞'

    def notification_text_best_pools(self, pd: PoolMapPair, n_pools):
        return '–¢–æ–ø –ø—É–ª–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ THORChain'

    # ------------------------------------------

    DATE_TRANSLATOR = {
        'just now': '–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å',
        'never': '–Ω–∏–∫–æ–≥–¥–∞',
        'sec': '—Å–µ–∫',
        'min': '–º–∏–Ω',
        'hour': '—á–∞—Å',
        'hours': '—á–∞—Å',
        'day': '–¥–Ω',
        'days': '–¥–Ω',
        'month': '–º–µ—Å',
        'months': '–º–µ—Å',
        'ago': '–Ω–∞–∑–∞–¥',
    }

    def format_time_ago(self, d):
        return format_time_ago(d, translate=self.DATE_TRANSLATOR)

    def seconds_human(self, s):
        return seconds_human(s, translate=self.DATE_TRANSLATOR)

    # ----- RUNE FLOW ------

    def notification_text_cex_flow(self, cex_flow: RuneCEXFlow):
        emoji = self.cex_flow_emoji(cex_flow)
        period_string = self.format_period(cex_flow.period_sec)
        return (
            f'üå¨Ô∏è <b>Rune –ø–æ—Ç–æ–∫–∏ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–≤—ã—Ö –±–∏—Ä–∂ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_string}</b>\n'
            f'‚û°Ô∏è –ó–∞–≤–µ–ª–∏: {pre(short_money(cex_flow.rune_cex_inflow, postfix=RAIDO_GLYPH))} '
            f'({short_dollar(cex_flow.in_usd)})\n'
            f'‚¨ÖÔ∏è –í—ã–≤–µ–ª–∏: {pre(short_money(cex_flow.rune_cex_outflow, postfix=RAIDO_GLYPH))} '
            f'({short_dollar(cex_flow.out_usd)})\n'
            f'{emoji} –ü–æ—Ç–æ–∫ –Ω–∞ –±–∏—Ä–∂–∏: '
            f'{pre(short_money(cex_flow.rune_cex_netflow, postfix=RAIDO_GLYPH, signed=True))} '
            f'({short_dollar(cex_flow.netflow_usd)})'
        )

    # ----- SUPPLY ------

    SUPPLY_HELPER_TRANSLATOR = {
        ThorRealms.RESERVES: '–†–µ–∑–µ—Ä–≤—ã',
        ThorRealms.STANDBY_RESERVES: '–ù–µ—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–µ–∑–µ—Ä–≤—ã',
    }

    def text_metrics_supply(self, market_info: RuneMarketInfo):
        sp = market_info.supply_info

        burn_amt = short_rune(abs(sp.lending_burnt_rune))
        burn_pct = format_percent(abs(sp.lending_burnt_rune), sp.total)
        if sp.lending_burnt_rune > 0:
            str_burnt = f'üî• –°–æ–∂–∂–µ–Ω–æ Rune ‚Äì {code(burn_amt)} ({burn_pct}).\n'
        elif sp.lending_burnt_rune < 0:
            str_burnt = f'ü™ô –ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ Rune ‚Äì {burn_amt} ({burn_pct}).\n'
        else:
            str_burnt = ''

        return (
            f'‚ö°Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã Rune ‚Äì {pre(pretty_rune(market_info.total_supply))}\n'
            f'{str_burnt}'
            f'üèä‚Äç –ü—É–ª—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {pre(short_rune(sp.pooled))} ({format_percent(sp.pooled_percent)}).\n'
            f'RUNEPool: {pre(short_rune(sp.runepool))} ({format_percent(sp.runepool_percent)}).\n'
            f'POL: {pre(short_rune(sp.pol))} ({format_percent(sp.pol_percent)}).\n'
            f'üîí –ë–æ–Ω–¥—ã –Ω–æ–¥: {pre(short_rune(sp.bonded))} ({format_percent(sp.bonded_percent)}).\n'
            f'üè¶ –ë–∏—Ä–∂—ã: {pre(short_rune(sp.in_cex))} ({format_percent(sp.in_cex_percent)}).\n'
            f'üí∞ –°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞ –∏–º–µ–µ—Ç {pre(short_rune(sp.treasury))}.'
        )

    SUPPLY_PIC_CIRCULATING = '–ü—Ä–æ—á–∏–µ —Ü–∏—Ä–∫—É–ª–∏—Ä—É—é—â–∏–µ'
    SUPPLY_PIC_TEAM = '–ö–æ–º–∞–Ω–¥–∞'
    SUPPLY_PIC_SEED = '–°–∏–¥-–∏–Ω–≤–µ—Å—Ç–æ—Ä—ã'
    SUPPLY_PIC_VESTING_9R = 'NineRealms –≤–µ—Å—Ç–∏–Ω–≥'
    SUPPLY_PIC_RESERVES = '–†–µ–∑–µ—Ä–≤'
    SUPPLY_PIC_UNDEPLOYED = '–ù–µ—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ä–µ–∑–µ—Ä–≤'
    SUPPLY_PIC_BONDED = '–ë–æ–Ω–¥ –≤ –Ω–æ–¥–∞—Ö'
    SUPPLY_PIC_TREASURY = '–°–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü–∞'
    SUPPLY_PIC_MAYA = 'Maya –ø—É–ª'
    SUPPLY_PIC_POOLED = '–í –ø—É–ª–∞—Ö'
    SUPPLY_PIC_BURNED = '–°–æ–∂–∂–µ–Ω–æ'
    SUPPLY_PIC_SECTION_CIRCULATING = '–ù–∞—Ç–∏–≤–Ω—ã–µ —Ü–∏—Ä–∫—É–ª–∏—Ä—É—é—Ç'
    SUPPLY_PIC_SECTION_LOCKED = '–ù–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã'
    SUPPLY_PIC_SECTION_KILLED = '–£–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–µ'

    # ---- MY WALLET ALERTS ----

    TX_COMMENT_TABLE = {
        'Deposit': '–î–µ–ø–æ–∑–∏—Ç',
        'Send': '–ü–µ—Ä–µ–≤–æ–¥',
        'Outbound': '–ò—Å—Ö–æ–¥—è—â–∞—è',
        'OutboundTx': '–ò—Å—Ö–æ–¥—è—â–∞—è',
    }

    def notification_text_rune_transfer(self, t: RuneTransfer, my_addresses, name_map):
        asset, comment, from_my, to_my, tx_link, usd_amt, memo = self._native_transfer_prepare_stuff(
            my_addresses, t,
            name_map=name_map
        )
        comment = self.TX_COMMENT_TABLE.get(comment, comment)

        return f'üè¶ <b>{comment}</b>{tx_link}: {code(short_money(t.amount, postfix=" " + asset))} {usd_amt} ' \
               f'–æ—Ç {from_my} ' \
               f'‚û°Ô∏è –∫ {to_my}{memo}.'

    def notification_text_rune_transfer_public(self, t: RuneTransfer, name_map):
        asset, comment, from_my, to_my, tx_link, usd_amt, memo = self._native_transfer_prepare_stuff(
            None, t,
            tx_title='',
            name_map=name_map
        )

        return f'üí∏ <b>–ë–æ–ª—å—à–æ–π –ø–µ—Ä–µ–≤–æ–¥</b>{tx_link}: ' \
               f'{code(short_money(t.amount, postfix=" " + asset))}{usd_amt} ' \
               f'–æ—Ç {from_my} ‚û°Ô∏è –∫ {to_my}{memo}.'

    @staticmethod
    def unsubscribe_text(unsub_id):
        return f'üîï –û—Ç–ø–∏—Å–∫–∞: /unsub_{unsub_id}'

    def notification_text_regular_lp_report(self, user, address, pool, lp_report: LiquidityPoolReport, local_name: str,
                                            unsub_id):
        explorer_link, name_str, pretty_pool, thor_yield_link = self._regular_report_variables(address, local_name,
                                                                                               pool)

        pos_type = '–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∫–ª–∞–¥–∞' if lp_report.is_savers else '–æ –ø–æ–∑–∏—Ü–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'
        return (
            f'–í–∞—à —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –æ—Ç—á–µ—Ç {pos_type} –Ω–∞ –∞–¥—Ä–µ—Å–µ {explorer_link}{name_str} –≤ –ø—É–ª–µ {pre(pretty_pool)} –≥–æ—Ç–æ–≤.\n'
            f'{thor_yield_link}.\n\n'
            f'{self.unsubscribe_text(unsub_id)}'
        )

    def notification_text_loan_card(self, card: LoanReportCard, local_name='', unsub_id=''):
        address_link = self.link_to_address(card.address, None, is_loan=True)
        t_pos = card.details.t_pos
        asset_str = Asset(t_pos.asset).pretty_str
        message = (
            f"‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n"
            f'üè¶ <b>–ó–∞—ë–º –¥–ª—è</b> {address_link} (–ø—É–ª {card.pool})\n\n'
        )

        message += (
            f'–¢–µ–∫—É—â–∏–π –∑–∞–ª–æ–≥: {underline(bold(pretty_money(t_pos.collateral_current)))} '
            f'{bold(asset_str)} –∏–ª–∏ '
            f'{underline(bold(pretty_dollar(card.collateral_current_usd)))}\n'
        )

        if card.collateral_price_last_add and card.collateral_price_last_add > 0:
            old_collateral_value = card.collateral_price_last_add * t_pos.collateral_current
            message += (
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ª–æ–≥–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞—ë–º–∞: {ital(pretty_dollar(old_collateral_value))}"
            )

            percent_change = up_down_arrow(old_collateral_value, card.collateral_current_usd, signed=True,
                                           percent_delta=True)

            if percent_change:
                message += f" ({percent_change})"
            message += '\n'

        message += f'–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {ital(self.seconds_human(card.time_elapsed))}\n'

        message += f'\n<b>–î–æ–ª–≥ —Ç–µ–∫—É—â–∏–π</b>: {underline(bold(pretty_dollar(t_pos.debt_current)))}\n'

        if t_pos.debt_current > t_pos.debt_issued:
            message += f'<b>–î–æ–ª–≥ –≤—ã–ø—É—â–µ–Ω–Ω—ã–π</b>: {ital(pretty_dollar(t_pos.debt_issued))}\n'

        if t_pos.debt_repaid:
            message += f'<b>–î–æ–ª–≥ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π</b>: {ital(pretty_dollar(t_pos.debt_repaid))}\n'

        if t_pos.debt_current > 0:
            message += (
                f"CR: {bold(pretty_money(card.collateral_ratio))}x, "
                f"LTV: {bold(pretty_money(card.loan_to_value))}%\n"
            )

        if target_assets := card.details.m_pos.target_assets:
            if len(target_assets) == 1:
                asset = target_assets[0]
                message += f'–¶–µ–ª–µ–≤–æ–π –∞–∫—Ç–∏–≤ –∑–∞—ë–º–∞: {ital(Asset(asset).pretty_str)}\n'
            else:
                assets_all = ', '.join(Asset(a).pretty_str for a in target_assets)
                message += f'–¶–µ–ª–µ–≤—ã–µ –∞–∫—Ç–∏–≤—ã –∑–∞—ë–º–∞: {ital(assets_all)}\n'

        if unsub_id:
            message += f'\n{self.unsubscribe_text(unsub_id)}\n'

        message += f"‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì"

        return message

    # ------ DEX -------

    @staticmethod
    def format_dex_entry(e: DexReportEntry, r):
        n = e.count
        txs = '—à—Ç.'
        return (
            f'{bold(n)} {txs} '
            f'({pre(short_rune(e.rune_volume))} –∏–ª–∏ '
            f'{pre(short_dollar(e.rune_volume * r.usd_per_rune))})')

    STR_24_HOUR = '24 —á–∞—Å–∞'

    def notification_text_dex_report(self, r: DexReport):
        period_str = self.format_period(r.period_sec)

        top_aggr = r.top_popular_aggregators()[:3]
        top_aggr_str = ''
        for i, (_, e) in enumerate(top_aggr, start=1):
            e: DexReportEntry
            top_aggr_str += f'{i}. {code(e.name)}: {self.format_dex_entry(e, r)} \n'
        top_aggr_str = top_aggr_str or '-'

        top_asset_str = ''
        top_asset = r.top_popular_assets()[:3]
        for i, (_, e) in enumerate(top_asset, start=1):
            e: DexReportEntry
            top_asset_str += f'{i}. {code(e.name)}: {self.format_dex_entry(e, r)} \n'
        top_asset_str = top_asset_str or '-'

        return (
            f'ü§πüèª‚Äç‚ôÇÔ∏è <b>DEX –∏—Å–ø–æ–ª—å–∑–æ–≤–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_str}</b>\n\n'
            f'‚Üí –û–±–º–µ–Ω –≤–Ω—É—Ç—Ä—å: {self.format_dex_entry(r.swap_ins, r)}\n'
            f'‚Üê –û–±–º–µ–Ω –Ω–∞—Ä—É–∂—É: {self.format_dex_entry(r.swap_outs, r)}\n'
            f'‚àë –í —Å—É–º–º–µ: {self.format_dex_entry(r.total, r)}\n\n'
            f'–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã:\n{top_aggr_str}\n'
            f'–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤—ã:\n{top_asset_str}'
        ).strip()

    def notification_text_saver_stats(self, event: AlertSaverStats):
        message = f'üí∞ <b>THORChain —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è</b>\n\n'

        savers, prev = event.current_stats, event.previous_stats

        total_earned_usd = savers.total_rune_earned * event.price_holder.usd_per_rune
        avg_apr_change, saver_number_change, total_earned_change_usd, total_usd_change = \
            self.get_savers_stat_changed_metrics_as_str(event, prev, savers, total_earned_usd)

        fill_cap = savers.overall_fill_cap_percent(event.price_holder.pool_info_map)

        message += (
            f'–í—Å–µ–≥–æ {code(savers.total_unique_savers)}{saver_number_change} –≤–∫–ª–∞–¥—á–∏–∫–æ–≤ '
            f'–≤ —Å—É–º–º–µ —Å –∫–∞–ø–∏—Ç–∞–ª–æ–º {code(short_dollar(savers.total_usd_saved))}{total_usd_change}.\n'
            f'<b>–°—Ä–µ–¥–Ω–∏–µ –≥–æ–¥–æ–≤—ã–µ:</b> {pre(pretty_money(savers.average_apr))}%{avg_apr_change}.\n'
            f'–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {pre(pretty_dollar(total_earned_usd))}{total_earned_change_usd}.\n'
            f'–û–±—â–∞—è –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç—å: {fill_cap:.1f}%'
        )

        return message

    TEXT_PIC_SAVERS_VAULTS = '—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π'
    TEXT_PIC_SAVERS_TOTAL_SAVERS = '–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
    TEXT_PIC_SAVERS_TOTAL_SAVED_VALUE = '–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ'
    TEXT_PIC_SAVERS_TOTAL_EARNED = '–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ'
    TEXT_PIC_SAVERS_APR_MEAN = '–ì–æ–¥–æ–≤—ã–µ –≤ —Å—Ä–µ–¥–Ω–µ–º'
    TEXT_PIC_SAVERS_TOTAL_FILLED = '–ó–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç—å'
    TEXT_PIC_SAVERS_OR = ' –∏–ª–∏ '
    TEXT_PIC_SAVERS_ASSET = '–ê–∫—Ç–∏–≤'
    TEXT_PIC_SAVERS_USD = 'USD'
    TEXT_PIC_SAVERS_APR = '–ì–æ–¥–æ–≤—ã–µ'
    TEXT_PIC_SAVERS = '–ê–¥—Ä–µ—Å–∞'
    TEXT_PIC_SAVERS_FILLED = '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'
    TEXT_PIC_SAVERS_EARNED = '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ'

    TEXT_SAVERS_NO_DATA = 'üò© –ü—Ä–æ—Å—Ç–∏—Ç–µ, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π.'

    SV_PIC_TITLE = '—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è'
    SV_PIC_APR = '–ì–æ–¥–æ–≤—ã–µ'
    SV_PIC_USD = 'USD'
    SV_PIC_ADDED = '–î–æ–±–∞–≤–∏–ª–∏'
    SV_PIC_WITHDRAWN = '–í—ã–≤–µ–ª–∏'
    SV_PIC_REDEEMABLE = '–î–æ—Å—Ç—É–ø–Ω–æ'
    SV_PIC_PRICE = '–¶–µ–Ω–∞'
    SV_PIC_EARNED = '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ'
    SV_PIC_ELAPSED = '–¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'

    @staticmethod
    def pretty_asset(name, abbr=True):
        return BaseLocalization.pretty_asset(name, abbr).replace('synth', '—Å–∏–Ω—Ç.').replace('trade', '—Ç–æ—Ä–≥.')

    # ----- LOANS ------

    def notification_text_loan_open(self, event: AlertLoanOpen, name_map: NameMap):
        l = event.loan
        user_link = self.link_to_address(l.owner, name_map)
        asset = ' ' + Asset(l.collateral_asset).pretty_str
        target_asset = Asset(l.target_asset).pretty_str
        db_link = link(self.LENDING_DASHBOARD_URL, "–ò–Ω—Ñ–æ–ø–∞–Ω–µ–ª—å")
        # tx_link = link(get_explorer_url_to_tx(self.cfg.network_id, Chains.THOR, event.tx_id), "TX")
        return (
            'üè¶‚Üí <b>–ó–∞—ë–º –æ—Ç–∫—Ä—ã—Ç</b>\n'
            f'–í–Ω–µ—Å–µ–Ω –∑–∞–ª–æ–≥: {code(pretty_money(l.collateral_float, postfix=asset))}'
            f' ({pretty_dollar(event.collateral_usd)})\n'
            f'CR: x{pretty_money(l.collateralization_ratio)}\n'
            f'–î–æ–ª–≥: {code(pretty_dollar(l.debt_usd))}\n'
            f'–¶–µ–ª–µ–≤–æ–π –∞–∫—Ç–∏–≤: {pre(target_asset)}\n'
            f'{user_link} | {db_link}'
        )

    def notification_text_loan_repayment(self, event: AlertLoanRepayment, name_map: NameMap):
        l = event.loan
        user_link = self.link_to_address(l.owner, name_map)
        asset = ' ' + Asset(l.collateral_asset).pretty_str
        db_link = link(self.LENDING_DASHBOARD_URL, "–ò–Ω—Ñ–æ–ø–∞–Ω–µ–ª—å")
        # tx_link = link(get_explorer_url_to_tx(self.cfg.network_id, Chains.THOR, event.tx_id), "TX")
        return (
            'üè¶‚Üê <b>–ó–∞—ë–º –ø–æ–≥–∞—à–µ–Ω</b>\n'
            f'–ó–∞–ª–æ–≥: {code(pretty_money(l.collateral_float, postfix=asset))}'
            f' ({pretty_dollar(event.collateral_usd)})\n'
            f'–í—ã–ø–ª–∞—á–µ–Ω –¥–æ–ª–≥: {pre(pretty_dollar(l.debt_repaid_usd))}\n'
            f'{user_link} | {db_link}'
        )

    def _format_lending_pool_entry(self, asset, fill, pool_desc, pool_name, remaining_collateral, sing):
        pool_desc += (
            f'{pool_name} '
            f'–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: {fill} {sing}, '
            f'{remaining_collateral} {self.pretty_asset(asset)} –¥–æ—Å—Ç—É–ø–Ω–æ.'
            f'\n'
        )
        return pool_desc

    def notification_lending_stats(self, event: AlertLendingStats):
        (borrower_count_delta, curr, lending_tx_count_delta, rune_burned_rune_delta, total_borrowed_amount_delta,
         total_collateral_value_delta, cr) = self._lending_stats_delta(event)

        paused_str = 'üõë –ö—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n' if event.current.is_paused else ''

        return (
            f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è</b>\n\n'
            f'{paused_str}'
            f'üôã‚Äç‚ôÄÔ∏è –ß–∏—Å–ª–æ –∑–∞–µ–º—â–∏–∫–æ–≤: {bold(pretty_money(curr.borrower_count))} {borrower_count_delta}\n'
            f'üìù –ß–∏—Å–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {bold(pretty_money(curr.lending_tx_count, integer=True))} {lending_tx_count_delta}\n'
            f'üí∞ –û–±—â–µ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ: {bold(short_dollar(curr.total_collateral_value_usd))}'
            f' {total_collateral_value_delta}\n'
            f'üí∏ –û–±—ä–µ–º –∑–∞–π–º–æ–≤: {bold(short_dollar(curr.total_borrowed_amount_usd))} {total_borrowed_amount_delta}\n'
            f'{self._lend_pool_desc(event)}'
            f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è: {pretty_money(cr)}\n"
            f'‚ù§Ô∏è‚Äçüî• Rune —Å–æ–∂–∂–µ–Ω–æ: {bold(short_rune(curr.rune_burned_rune))} {rune_burned_rune_delta}\n\n'
            f'{link(self.LENDING_LINK, "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏")}'
        )

    def notification_lending_open_back_up(self, event: AlertLendingOpenUpdate):
        available_collateral = short_money(event.pool_state.collateral_available)
        pool_name = self.LEND_DICT.get(event.asset, event.asset)
        return (
            f'üü¢ –í –ø—É–ª–µ {pool_name} –æ—Ç–∫—Ä—ã–ª–æ—Å—å –º–µ—Å—Ç–æ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤.\n'
            f'{available_collateral} {pool_name} –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∫–∞–∫ –∑–∞–ª–æ–≥–∞.\n'
            f'–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–π—á–∞—Å ‚Äì {ital(format_percent(event.pool_state.fill, total=1.0))}.\n'
        )

    TEXT_LENDING_STATS_NO_DATA = 'üò© –ü—Ä–æ—Å—Ç–∏—Ç–µ, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è.'

    # ------- RUNEPOOL -------

    def notification_runepool_action(self, event: AlertRunePoolAction, name_map: NameMap):
        action_str = '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ' if event.is_deposit else '–≤—ã–≤–æ–¥'
        from_link = self.link_to_address(event.actor, name_map)
        to_link = self.link_to_address(event.destination_address, name_map)
        amt_str = f"{pre(pretty_rune(event.amount))}"

        if event.is_deposit:
            route = f"üë§{from_link} ‚û°Ô∏è RUNEPool"
        else:
            route = f"RUNEPool ‚û°Ô∏è üë§{to_link}"

        if event.affiliate:
            aff_collector = self.name_service.get_affiliate_name(event.affiliate)
            aff_collector = f'{aff_collector} ' if aff_collector else ''

            aff_text = f'{aff_collector}–ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è: {short_dollar(event.affiliate_usd)} ' \
                       f'({format_percent(event.affiliate_rate, 1)})\n'
        else:
            aff_text = ''

        return (
            f"üè¶ <b>RUNEPool {action_str}</b> {self.link_to_tx(event.tx_hash)}\n"
            f"{route}\n"
            f"–í—Å–µ–≥–æ: {amt_str} ({pretty_dollar(event.usd_amount)})\n"
            f"{aff_text}"
        )

    def notification_runepool_stats(self, event: AlertRunepoolStats):
        n_providers_delta, pnl_delta, rune_delta, share_delta = self._runepool_deltas(event)

        return (
            f'üè¶ <b>RUNEPool —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n'
            f'–í—Å–µ–≥–æ –≤–Ω–µ—Å–µ–Ω–æ: {bold(pretty_rune(event.current.rune_value))} {rune_delta}\n'
            f'–î–æ–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {bold(pretty_percent(event.current.providers_share, signed=False))} {share_delta}\n'
            f'–î–æ—Ö–æ–¥/—É–±—ã—Ç–æ–∫: {bold(pretty_rune(event.current.pnl))} {pnl_delta}\n'
            f'–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã Rune: {bold(short_money(event.current.n_providers, integer=True))} {n_providers_delta}\n'
            f'–°—Ä–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {bold(pretty_rune(event.current.avg_deposit))}\n'
        )

    def notification_text_pol_stats(self, event: AlertPOLState):
        text = 'ü•É <b>POL: –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</b>\n\n'

        curr, prev = event.current, event.previous
        pol_progress = progressbar(curr.rune_value, event.mimir_max_deposit, 10)

        str_value_delta_pct, str_value_delta_abs = '', ''
        if prev:
            str_value_delta_pct = up_down_arrow(prev.rune_value, curr.rune_value, percent_delta=True, brackets=True,
                                                threshold_pct=0.5)

        pnl_pct = curr.pnl_percent
        text += (
            f"–¢–µ–∫—É—â–∞—è POL –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {code(short_rune(curr.rune_value))} –∏–ª–∏ "
            f" {code(short_dollar(curr.usd_value))} {str_value_delta_pct}\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {pre(pretty_percent(event.pol_utilization, signed=False))} {pre(pol_progress)} "
            f" –∏–∑ {short_rune(event.mimir_max_deposit)} –º–∞–∫—Å–∏–º—É–º.\n"
            f"Rune –¥–µ–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: {pre(short_rune(curr.rune_deposited))} "
            f"–∏ –≤—ã–≤–µ–¥–µ–Ω–æ: {pre(short_rune(curr.rune_withdrawn))}\n"
            f"–î–æ—Ö–æ–¥—ã/—É–±—ã—Ç–∫–∏: {pre(pretty_percent(pnl_pct))} {chart_emoji(pnl_pct)}"
        )

        # POL pool membership
        if event.membership:
            text += "\n\n<b>–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –ø—É–ª–∞—Ö:</b>\n"
            text += self._format_pol_membership(event, of_pool='–æ—Ç –ø—É–ª–∞')

        return text.strip()

    # ------ Bond providers alerts ------

    TEXT_BOND_PROVIDER_ALERT_FOR = '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –±–æ–Ω–¥–∞'
    TEXT_BP_NODE = 'üñ•Ô∏è –ù–æ–¥–∞'

    def bp_event_duration(self, ev: EventProviderStatus):
        dur = ev.duration
        return f' ({self.seconds_human(dur)} —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞)' if dur else ''

    def bond_provider_event_text(self, event: NodeEvent):
        if event.type == NodeEventType.FEE_CHANGE:
            verb = '–ø–æ–¥–Ω—è–ª' if event.data.previous < event.data.current else '–æ–ø—É—Å—Ç–∏–ª'
            return (
                f'ÔºÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–æ–¥—ã {ital(verb)} –∫–æ–º–∏—Å—Å–∏—é —Å '
                f'{pre(format_percent(event.data.previous, 1))} –¥–æ {pre(format_percent(event.data.current, 1))}.'
            )
        elif event.type == NodeEventType.CHURNING:
            data: EventProviderStatus = event.data
            emoji = '‚ú≥Ô∏è' if data.appeared else '‚è≥'
            adjective = '–∞–∫—Ç–∏–≤–Ω–∞' if data.appeared else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π'
            return f'{emoji} –ù–æ–¥–∞ —Å—Ç–∞–ª–∞ {bold(adjective)}{self.bp_event_duration(data)}.'
        elif event.type == NodeEventType.PRESENCE:
            data: EventProviderStatus = event.data
            verb = '–ø–æ–¥–∫–ª—é—á–∏–ª–∞—Å—å –∫ —Å–µ—Ç–∏' if data.appeared else '–æ—Ç–∫–ª—é—á–∏–ª–∞—Å—å –æ—Ç —Å–µ—Ç–∏'
            emoji = '‚úÖ' if data.appeared else '‚ùå'
            return f'{emoji} –ù–æ–¥–∞ {ital(verb)}{self.bp_event_duration(data)}.'
        elif event.type == NodeEventType.BOND_CHANGE:
            data: EventProviderBondChange = event.data
            delta = data.curr_bond - data.prev_bond
            delta_str = up_down_arrow(data.prev_bond, data.curr_bond, money_delta=True, postfix=RAIDO_GLYPH)
            verb = '–≤—ã—Ä–æ—Å' if delta > 0 else '—É–ø–∞–ª'
            emoji = 'üìà' if delta > 0 else 'üìâ'
            return (
                f'{emoji} –†–∞–∑–º–µ—Ä –±–æ–Ω–¥–∞ –≤ –Ω–æ–¥–µ {bold(verb)} '
                f'—Å {pre(pretty_rune(data.prev_bond))} '
                f'–¥–æ {pre(pretty_rune(data.curr_bond))} '
                f'({ital(delta_str)} –∏–ª–∏ {ital(self.bp_bond_percent(data))}).'
            )
        elif event.type == NodeEventType.BP_PRESENCE:
            data: EventProviderStatus = event.data
            verb = '–ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ' if data.appeared else '–∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞'
            emoji = 'üôÖ' if data.appeared else 'üëå'
            return f'{emoji} –≠—Ç–æ—Ç –∞–¥—Ä–µ—Å {verb} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –±–æ–Ω–¥–∞ –¥–ª—è –Ω–æ–¥—ã{self.bp_event_duration(data)}.'
        else:
            return ''
