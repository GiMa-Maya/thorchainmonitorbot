<style>
    .affiliate-logos {
        display: flex;
        justify-content: center; /* Center the block inside */
        position: relative;
    }

    .affiliate-logos img {
        width: 120px;
        height: 120px;

        filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.2));
        margin-left: -30px;
    }

    .affiliate-logos img:first-child {
        margin-left: 0; /* Ensure the first image starts normally */
    }

    .affiliate-name {
        font-weight: bolder;
        margin-top: 8px;
        font-size: 42px;
        width: 200%;
        transform: translate(-25%);
        text-align: center;
        text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
        color: #ffffff;
    }

    .affiliate-name-no {
        text-shadow: none;
        color: #bbb;
    }

    .aff-fee {
        display: inline;
        font-size: 36px;
        width: 220px;
        text-align: left;
        color: #51efe2;
    {#color: #a3f8ef;#}
    }

    .aff-free {
        color: #92e660;
    }

    .no-aff {
        opacity: 0.7;
        letter-spacing: 1px;
        text-align: center;
        color: #bbb;
    }

    .affiliate-part {
        width: 340px;
    }

</style>

<div class="affiliate-part">
    {% if affiliate_names %}
        <div class="affiliate-logos">
            {% for name in affiliate_names %}
                <img src="renderer/logo/unknown.png?rv=1"
                     alt="{{ name }} logo"
                     class="affiliate-logo affiliate-logo-{{ loop.index0 }}"
                     style="left: {{ loop.index0 * 20 }}%;">
            {% endfor %}
        </div>
        <div class="affiliate-name">
            {{ ", ".join(affiliate_names) }}
            {% if float(affiliate_fee) > 0 %}
                <div class="aff-fee">
                    {{ pretty_money(float(affiliate_fee)) }}%
                </div>
            {% else %}
                <div class="aff-fee aff-free">
                    Free!
                </div>
            {% endif %}
        </div>

    {% else %}
        {% include "components/no-aff-logo.jinja2" %}
        <div class="affiliate-name no-aff">No affiliate</div>
    {% endif %}
</div>

<script>
    const nameToCode = {
        'trustwallet': 'trust',
        'trust': '',
        'thorswap': '',
        'asgardex': '',
        'babylonswap': '',
        'bitget': '',
        'cacaoswap': '',
        'cakewallet': '',
        'coinbot': '',

        'ctrl': '',
        'xdefi': 'ctrl',

        'decentralfi': '',
        'edgewallet': '',
        'eldorito': '',
        'ethos': '',
        'gemwallet': '',
        'giddy': '',
        'instaswap': '',

        'ledgerlive': '',
        'ledger live': 'ledgerlive',
        'ledger': 'ledgerlive',
        'll': 'ledgerlive',

        'lends': '',
        'lifi': '',
        'li.fi': 'lifi',
        'okx': '',
        'onekey': '',
        'rango': '',
        'shapeshift': '',
        'symbiosis': '',
        'thorwallet': '',
        'unizen': '',
        'vultisig': '',
        'vultisig ios': 'vultisig',
        'vultisig android': 'vultisig',

        'zengo': '',
        'tokenpocket': '',
        'swapkit': '',

        'gemwallet': '',
    };

    const logoSpecialCase = {
        'shapeshift': 'fox.png',
        'tokenpocket': 'tps.png',
        'vultisig': 'vult.svg',
        'rango': 'rango.png',
        'rangoexchange': 'rango.png',
        'swapkit': 'swapkit.png',
        'bitget': 'bitget.png',
        'astrolescent': 'astrolescent.png',
        'hyperpay': 'hyperpay.png',
        'onekey': 'onekey.png',
        'hasherwallet': 'hasher-wallet.png',
        'easycross': 'easycross.png',
        'keystone': 'key-stone.png',
    }

    function setLogoForAffiliate(affiliateName, selector = '.affiliate-logo') {
        console.log(`Affiliate name is ${affiliateName} assigned to selector ${selector}`)
        affiliateName = affiliateName.toLowerCase().replace(/\s+/g, '');
        let codedAffName = nameToCode[affiliateName];

        if (codedAffName === undefined || codedAffName === '') {
            codedAffName = affiliateName;
        }

        let logoPath = `https://raw.githubusercontent.com/ViewBlock/cryptometa/master/data/thorchain/ecosystem/${codedAffName}/logo.svg`
        const specialCaseLogo = logoSpecialCase[codedAffName];
        if (specialCaseLogo !== undefined) {
            logoPath = `renderer/static/img/ecosystem/${specialCaseLogo}`
            console.log(`Special case logo for ${affiliateName} URL is ${logoPath}`)
        }

        const affiliateLogo = document.querySelector(selector);

        // on error try the same name with .png extension
        // do it once
        let triedPng = false;
        affiliateLogo.onerror = function () {
            if (!triedPng) {
                affiliateLogo.src = logoPath.replace('.svg', '.png');
                console.log(`Affiliate logo for ${affiliateName} URL is ${logoPath.replace('.svg', '.png')}`)
                triedPng = true;
            } else {
                affiliateLogo.src = 'renderer/logo/unknown.png'
            }
        }

        affiliateLogo.src = logoPath;
        console.log(`Affiliate logo for ${affiliateName} (${codedAffName}) URL is ${logoPath}`)
    }

    const names = {{ affiliate_names | safe }};
    for (let i = 0; i < names.length; i++) {
        setLogoForAffiliate(names[i], `.affiliate-logo-${i}`);
    }

</script>

